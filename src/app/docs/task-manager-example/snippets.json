{
    "snippets": [
      {
        "codeblockTitle": "DBHelper.kt - SQLite Database Helper",
      "code": "package com.example.taskmanager\n\nimport android.content.ContentValues\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.sqlite.SQLiteOpenHelper\n\nclass DBHelper(context: Context) : SQLiteOpenHelper(context, \"TasksDB1\", null, 1) {\n    override fun onCreate(db: SQLiteDatabase) {\n        val createTable = \"CREATE TABLE Tasks (id INTEGER PRIMARY KEY, name TEXT, dueDate TEXT, priority TEXT, category TEXT)\"\n        db.execSQL(createTable)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.execSQL(\"DROP TABLE IF EXISTS Tasks\")\n        onCreate(db)\n    }\n\n    // Insert task with category\n    fun insertTask(name: String, dueDate: String, priority: String, category: String) {\n        val db = writableDatabase\n        val values = ContentValues().apply {\n            put(\"name\", name)\n            put(\"dueDate\", dueDate)\n            put(\"priority\", priority)\n            put(\"category\", category) // Insert category\n        }\n        db.insert(\"Tasks\", null, values)\n    }\n\n    // Get tasks grouped by category\n    fun getTasksGroupedByCategory(): List<Pair<String, List<Task>>> {\n        val tasks = mutableListOf<Task>()\n        val db = readableDatabase\n        val cursor = db.rawQuery(\"SELECT * FROM Tasks ORDER BY priority\", null)\n\n        while (cursor.moveToNext()) {\n            val task = Task(\n                cursor.getInt(0),\n                cursor.getString(1),\n                cursor.getString(2),\n                cursor.getString(3),\n                cursor.getString(4) // Retrieve category from database\n            )\n            tasks.add(task)\n        }\n        cursor.close()\n\n        // Group tasks by category (priority)\n        return tasks.groupBy { it.category }.map { it.key to it.value }\n    }\n\n    // Delete task\n    fun deleteTask(id: Int) {\n        val db = writableDatabase\n        db.delete(\"Tasks\", \"id=?\", arrayOf(id.toString()))\n    }\n}"
      },
      {
      "codeblockTitle": "Task.kt - Data Model",
      "code": "package com.example.taskmanager\n\ndata class Task(\n    val id: Int,\n    val name: String,\n    val dueDate: String,\n    val priority: String,\n    val category: String // Added category as a field\n)"
      },
      {
      "codeblockTitle": "TaskAdapter.kt - RecyclerView Adapter",
      "code": "package com.example.taskmanager\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\n\nclass TaskAdapter(private val tasks: List<Task>, private val dbHelper: DBHelper, private val refreshList: () -> Unit) : RecyclerView.Adapter<TaskAdapter.TaskViewHolder>() {\n    inner class TaskViewHolder(val view: View) : RecyclerView.ViewHolder(view)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.task_item, parent, false)\n        return TaskViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: TaskViewHolder, position: Int) {\n        val task = tasks[position]\n        holder.view.findViewById<TextView>(R.id.taskName).text = task.name\n        holder.view.findViewById<TextView>(R.id.taskDueDate).text = task.dueDate\n        holder.view.findViewById<TextView>(R.id.taskPriority).text = task.priority\n        holder.view.findViewById<TextView>(R.id.taskCategory).text = task.category // Display category\n        holder.view.findViewById<Button>(R.id.deleteTask).setOnClickListener {\n            dbHelper.deleteTask(task.id)\n            refreshList()\n        }\n    }\n\n    override fun getItemCount() = tasks.size\n}"
      },
      {
      "codeblockTitle": "MainActivity.kt - Main Activity",
      "code": "package com.example.taskmanager\n\nimport android.os.Bundle\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var dbHelper: DBHelper\n    private lateinit var recyclerView: RecyclerView\n    private lateinit var taskPrioritySpinner: Spinner\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        dbHelper = DBHelper(this)\n        recyclerView = findViewById(R.id.recyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        // Initialize Spinner and populate with categories\n        taskPrioritySpinner = findViewById(R.id.taskPriorityInput)\n        val categories = arrayOf(\"Work\", \"Personal\", \"Urgent\")  // Task categories\n        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\n        taskPrioritySpinner.adapter = adapter\n\n        // Add Task button click listener\n        findViewById<Button>(R.id.addTaskButton).setOnClickListener {\n            val name = findViewById<EditText>(R.id.taskNameInput).text.toString()\n            val dueDate = findViewById<EditText>(R.id.taskDueDateInput).text.toString()\n            val priority = taskPrioritySpinner.selectedItem.toString()\n            val category = taskPrioritySpinner.selectedItem.toString()  // Category is the same as priority here\n\n            // Insert task if name and due date are not empty\n            if (name.isNotEmpty() && dueDate.isNotEmpty()) {\n                dbHelper.insertTask(name, dueDate, priority, category)\n                refreshTaskList()\n            }\n        }\n\n        // Refresh task list\n        refreshTaskList()\n    }\n\n    private fun refreshTaskList() {\n        val categorizedTasks = dbHelper.getTasksGroupedByCategory()\n        recyclerView.adapter = CategoryTaskAdapter(categorizedTasks, dbHelper, this::refreshTaskList)\n    }\n}"
      },
      {
      "codeblockTitle": "CategoryTaskAdapter.kt - RecyclerView Adapter for Categories",
      "code": "package com.example.taskmanager\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\n\nclass CategoryTaskAdapter(\n    private val categorizedTasks: List<Pair<String, List<Task>>>,\n    private val dbHelper: DBHelper,\n    private val refreshList: () -> Unit\n) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n\n    private val TYPE_CATEGORY = 0\n    private val TYPE_TASK = 1\n    private val itemList = mutableListOf<Any>()\n\n    init {\n        for ((category, tasks) in categorizedTasks) {\n            itemList.add(category) // Add category as a header\n            itemList.addAll(tasks) // Add tasks under that category\n        }\n    }\n\n    override fun getItemViewType(position: Int): Int {\n        return if (itemList[position] is String) TYPE_CATEGORY else TYPE_TASK\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return if (viewType == TYPE_CATEGORY) {\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.category_item, parent, false)\n            CategoryViewHolder(view)\n        } else {\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.task_item, parent, false)\n            TaskViewHolder(view)\n        }\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        if (holder is CategoryViewHolder) {\n            holder.categoryTitle.text = itemList[position] as String\n        } else if (holder is TaskViewHolder) {\n            val task = itemList[position] as Task\n            holder.taskName.text = task.name\n            holder.taskDueDate.text = task.dueDate\n            holder.taskPriority.text = task.priority\n            holder.deleteTask.setOnClickListener {\n                dbHelper.deleteTask(task.id)\n                refreshList()\n            }\n        }\n    }\n\n    override fun getItemCount() = itemList.size\n\n    inner class CategoryViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val categoryTitle: TextView = view.findViewById(R.id.categoryTitle)\n    }\n\n    inner class TaskViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        val taskName: TextView = view.findViewById(R.id.taskName)\n        val taskDueDate: TextView = view.findViewById(R.id.taskDueDate)\n        val taskPriority: TextView = view.findViewById(R.id.taskPriority)\n        val deleteTask: Button = view.findViewById(R.id.deleteTask)\n    }\n}"
      },
      {
  "codeblockTitle": "activity_main.xml - Main Layout",
  "code": "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <EditText\n        android:id=\"@+id/taskNameInput\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Task Name\" />\n\n    <EditText\n        android:id=\"@+id/taskDueDateInput\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Due Date\" />\n\n    <Spinner\n        android:id=\"@+id/taskPriorityInput\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n\n    <Button\n        android:id=\"@+id/addTaskButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Add Task\"/>\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>"
},
{
  "codeblockTitle": "category_item.xml - Category Header Layout",
  "code": "<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/categoryTitle\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:padding=\"10dp\"\n    android:textSize=\"18sp\"\n    android:textStyle=\"bold\"/>"
},
{
  "codeblockTitle": "colors.xml - Color Resources",
  "code": "<resources>\n    <color name=\"primaryColor\">#6200EE</color>\n    <color name=\"backgroundGray\">#F5F5F5</color>\n</resources>"
},
{
  "codeblockTitle": "strings.xml - String Resources",
  "code": "<resources>\n    <string name=\"app_name\">Task Manager</string>\n    <string-array name=\"priority_array\">\n        <item>Low</item>\n        <item>Medium</item>\n        <item>High</item>\n    </string-array>\n</resources>"
},
{
  "codeblockTitle": "task_item.xml - Task Item Layout",
  "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"8dp\">\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"12dp\">\n\n        <TextView\n            android:id=\"@+id/taskName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Task Name\"\n            android:textSize=\"16sp\" />\n\n        <TextView\n            android:id=\"@+id/taskDueDate\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Due Date\"\n            android:textSize=\"14sp\" />\n\n        <TextView\n            android:id=\"@+id/taskPriority\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Priority\"\n            android:textSize=\"14sp\" />\n\n        <Button\n            android:id=\"@+id/deleteTask\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Delete Task\"/>\n    </LinearLayout>\n</androidx.cardview.widget.CardView>"
}
    ]
  }
  