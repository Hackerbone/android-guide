{
  "snippets": [
    {
      "codeblockTitle": "MainActivity.java",
      "code": "package com.example.myapplication;\n\nimport android.os.Bundle;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.viewpager2.adapter.FragmentStateAdapter;\nimport androidx.viewpager2.widget.ViewPager2;\n\nimport com.google.android.material.tabs.TabLayout;\nimport com.google.android.material.tabs.TabLayoutMediator;\n\npublic class MainActivity extends AppCompatActivity {\n    private TabLayout tabLayout; // Tab layout to hold tabs\n    private ViewPager2 viewPager; // ViewPager2 to switch between fragments\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this); // Enables full-screen edge-to-edge UI\n        setContentView(R.layout.activity_main);\n\n        // Handles system window insets (for better UI adaptation)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        // Initialize views\n        tabLayout = findViewById(R.id.tabLayout);\n        viewPager = findViewById(R.id.viewPager);\n\n        // Set adapter for ViewPager2\n        viewPager.setAdapter(new MovieReviewPagerAdapter(this));\n\n        // Connect TabLayout with ViewPager2 and set tab titles\n        new TabLayoutMediator(tabLayout, viewPager,\n                (tab, position) -> {\n                    switch (position) {\n                        case 0:\n                            tab.setText(\"Submit Review\"); // First tab for submitting reviews\n                            break;\n                        case 1:\n                            tab.setText(\"View Reviews\"); // Second tab for viewing reviews\n                            break;\n                    }\n                }\n        ).attach();\n    }\n\n    /**\n     * Adapter class for ViewPager2, manages fragments for each tab.\n     */\n    private class MovieReviewPagerAdapter extends FragmentStateAdapter {\n        public MovieReviewPagerAdapter(FragmentActivity fragmentActivity) {\n            super(fragmentActivity);\n        }\n\n        @Override\n        public Fragment createFragment(int position) {\n            // Returns the corresponding fragment for each tab\n            switch (position) {\n                case 0:\n                    return new ReviewSubmissionFragment(); // First tab: Review submission\n                case 1:\n                    return new ReviewViewFragment(); // Second tab: Review display\n                default:\n                    return new ReviewSubmissionFragment(); // Default case (should never happen)\n            }\n        }\n\n        @Override\n        public int getItemCount() {\n            return 2; // Two tabs: Submit Review and View Reviews\n        }\n    }\n    public void refreshMovieList() {\n        // Find the ReviewViewFragment and call its populateMovieList method to refresh the list\n        ReviewViewFragment reviewViewFragment = (ReviewViewFragment) getSupportFragmentManager().findFragmentByTag(\"f\" + 1); // Fragment with position 1\n        if (reviewViewFragment != null) {\n            reviewViewFragment.populateMovieList(); // Refresh the ListView\n        }\n    }\n}\n\n"
    },
    {
      "codeblockTitle": "activity_main.xml",
      "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\"\n    tools:context=\".MainActivity\">\n\n    <com.google.android.material.tabs.TabLayout\n        android:id=\"@+id/tabLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n    <androidx.viewpager2.widget.ViewPager2\n        android:id=\"@+id/viewPager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintTop_toBottomOf=\"@id/tabLayout\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n</androidx.constraintlayout.widget.ConstraintLayout>"
    },
    {
      "codeblockTitle": "MovieDatabaseHelper.java",
      "code": "package com.example.myapplication;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Database helper class for managing movie reviews in an SQLite database.\n */\npublic class MovieDatabaseHelper extends SQLiteOpenHelper {\n    // Database name and version\n    private static final String DATABASE_NAME = \"movie_reviews_db\";\n    private static final int DATABASE_VERSION = 1;\n\n    // Table and column names\n    private static final String TABLE_REVIEWS = \"movie_reviews\";\n    private static final String COLUMN_ID = \"id\";\n    private static final String COLUMN_MOVIE_NAME = \"movie_name\";\n    private static final String COLUMN_YEAR = \"year\";\n    private static final String COLUMN_POINTS = \"points\";\n    private static final String COLUMN_REVIEW_TEXT = \"review_text\";\n\n    // SQL statement to create the movie reviews table\n    private static final String CREATE_TABLE_REVIEWS =\n            \"CREATE TABLE \" + TABLE_REVIEWS + \"(\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\" // Auto-incrementing primary key\n                    + COLUMN_MOVIE_NAME + \" TEXT,\" // Movie name\n                    + COLUMN_YEAR + \" INTEGER,\" // Release year\n                    + COLUMN_POINTS + \" REAL,\" // Rating points\n                    + COLUMN_REVIEW_TEXT + \" TEXT)\"; // Review text\n\n    /**\n     * Constructor for the database helper.\n     *\n     * @param context The application context.\n     */\n    public MovieDatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    /**\n     * Called when the database is first created.\n     *\n     * @param db The database instance.\n     */\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_TABLE_REVIEWS); // Execute SQL to create the table\n    }\n\n    /**\n     * Called when the database needs to be upgraded.\n     * This method drops the old table and creates a new one.\n     *\n     * @param db         The database instance.\n     * @param oldVersion The old database version.\n     * @param newVersion The new database version.\n     */\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_REVIEWS); // Delete old table\n        onCreate(db); // Recreate the table\n    }\n\n    /**\n     * Inserts a new movie review into the database.\n     *\n     * @param movieName  The name of the movie.\n     * @param year       The release year of the movie.\n     * @param points     The rating points given to the movie.\n     * @param reviewText The review text.\n     * @return The row ID of the newly inserted review, or -1 if an error occurred.\n     */\n    public long addMovieReview(String movieName, int year, float points, String reviewText) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Open database in write mode\n        ContentValues values = new ContentValues(); // Object to store values\n\n        // Put values into the ContentValues object\n        values.put(COLUMN_MOVIE_NAME, movieName);\n        values.put(COLUMN_YEAR, year);\n        values.put(COLUMN_POINTS, points);\n        values.put(COLUMN_REVIEW_TEXT, reviewText);\n\n        return db.insert(TABLE_REVIEWS, null, values); // Insert data into the database\n    }\n\n    /**\n     * Retrieves a list of all unique movie names from the database.\n     *\n     * @return A list of movie names.\n     */\n    public List<String> getAllMovieNames() {\n        List<String> movieNames = new ArrayList<>();\n        SQLiteDatabase db = this.getReadableDatabase(); // Open database in read mode\n\n        // Query to retrieve all movie names\n        Cursor cursor = db.query(\n                TABLE_REVIEWS,\n                new String[]{COLUMN_MOVIE_NAME}, // Select only the movie name column\n                null, null,\n                COLUMN_MOVIE_NAME, null, null // Group by movie name to get unique values\n        );\n\n        // Iterate through the results and add to the list\n        if (cursor.moveToFirst()) {\n            do {\n                movieNames.add(cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MOVIE_NAME)));\n            } while (cursor.moveToNext());\n        }\n\n        cursor.close(); // Close the cursor\n        return movieNames;\n    }\n\n    /**\n     * Retrieves detailed review information for a specific movie.\n     *\n     * @param movieName The name of the movie.\n     * @return A MovieReview object containing the details, or null if not found.\n     */\n    public MovieReview getMovieReviewDetails(String movieName) {\n        SQLiteDatabase db = this.getReadableDatabase(); // Open database in read mode\n\n        // Query to get details for a specific movie\n        Cursor cursor = db.query(\n                TABLE_REVIEWS,\n                null, // Select all columns\n                COLUMN_MOVIE_NAME + \" = ?\",\n                new String[]{movieName}, // Condition to filter by movie name\n                null, null, null\n        );\n\n        MovieReview review = null; // Initialize review object\n\n        // If a review exists, populate the MovieReview object\n        if (cursor.moveToFirst()) {\n            review = new MovieReview(\n                    cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MOVIE_NAME)),\n                    cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_YEAR)),\n                    cursor.getFloat(cursor.getColumnIndexOrThrow(COLUMN_POINTS)),\n                    cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_TEXT))\n            );\n        }\n\n        cursor.close(); // Close the cursor\n        return review;\n    }\n\n    /**\n     * Inner class to represent a Movie Review.\n     */\n    public static class MovieReview {\n        public String movieName;\n        public int year;\n        public float points;\n        public String reviewText;\n\n        /**\n         * Constructor to initialize a MovieReview object.\n         *\n         * @param movieName  The movie's name.\n         * @param year       The year of release.\n         * @param points     The rating points.\n         * @param reviewText The review text.\n         */\n        public MovieReview(String movieName, int year, float points, String reviewText) {\n            this.movieName = movieName;\n            this.year = year;\n            this.points = points;\n            this.reviewText = reviewText;\n        }\n    }\n}\n"
    },
    {
      "codeblockTitle": "ReviewSubmissionFrgment.java",
      "code": "package com.example.myapplication;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.RatingBar;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\npublic class ReviewSubmissionFragment extends Fragment {\n    // UI components\n    private EditText movieNameEditText;\n    private EditText yearEditText;\n    private RatingBar pointsRatingBar;\n    private EditText reviewEditText;\n    private Button submitButton;\n\n    // Database helper instance\n    private MovieDatabaseHelper databaseHelper;\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view = inflater.inflate(R.layout.fragment_review_submission, container, false);\n\n        // Initialize UI elements\n        movieNameEditText = view.findViewById(R.id.movieNameEditText);\n        yearEditText = view.findViewById(R.id.yearEditText);\n        pointsRatingBar = view.findViewById(R.id.pointsRatingBar);\n        reviewEditText = view.findViewById(R.id.reviewEditText);\n        submitButton = view.findViewById(R.id.submitButton);\n\n        // Initialize database helper\n        databaseHelper = new MovieDatabaseHelper(requireContext());\n\n        // Set up submit button click listener\n        submitButton.setOnClickListener(v -> submitReview());\n\n        return view;\n    }\n\n    /**\n     * Handles the submission of a movie review.\n     */\n    private void submitReview() {\n        // Retrieve input values\n        String movieName = movieNameEditText.getText().toString().trim();\n        String yearStr = yearEditText.getText().toString().trim();\n        float points = pointsRatingBar.getRating();\n        String reviewText = reviewEditText.getText().toString().trim();\n\n        // Validate inputs\n        if (movieName.isEmpty()) {\n            movieNameEditText.setError(\"Movie name is required\");\n            return;\n        }\n\n        if (yearStr.isEmpty()) {\n            yearEditText.setError(\"Year is required\");\n            return;\n        }\n\n        int year;\n        try {\n            year = Integer.parseInt(yearStr); // Convert year string to integer\n        } catch (NumberFormatException e) {\n            yearEditText.setError(\"Invalid year\");\n            return;\n        }\n\n        // Save review to the database\n\n        // Save to database\n        long  result = databaseHelper.addMovieReview(movieName, year, points, reviewText);\n\n        if (result != -1) {\n            Toast.makeText(requireContext(), \"Review submitted successfully!\", Toast.LENGTH_SHORT).show();\n            // Clear inputs\n            movieNameEditText.setText(\"\");\n            yearEditText.setText(\"\");\n            pointsRatingBar.setRating(0);\n            reviewEditText.setText(\"\");\n\n            // Refresh the list of movies in the ReviewViewFragment\n            ((MainActivity) getActivity()).refreshMovieList(); // Assuming MainActivity is hosting the fragments\n        } else {\n            Toast.makeText(requireContext(), \"Failed to submit review\", Toast.LENGTH_SHORT).show();\n        }\n    }\n}"
    },
    {
      "codeblockTitle": "fragment_review_submission.xml",
      "code": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n\n        <EditText\n            android:id=\"@+id/movieNameEditText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Movie Name\"\n            android:inputType=\"text\"/>\n\n        <EditText\n            android:id=\"@+id/yearEditText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Release Year\"\n            android:inputType=\"number\"/>\n\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Rating:\"\n            android:layout_marginTop=\"16dp\"/>\n\n        <RatingBar\n            android:id=\"@+id/pointsRatingBar\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:numStars=\"5\"\n            android:stepSize=\"1\"/>\n\n        <EditText\n            android:id=\"@+id/reviewEditText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"200dp\"\n            android:hint=\"Write your review here...\"\n            android:gravity=\"top|start\"\n            android:inputType=\"textMultiLine\"/>\n\n        <Button\n            android:id=\"@+id/submitButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Submit Review\"\n            android:layout_marginTop=\"16dp\"/>\n    </LinearLayout>\n</ScrollView>"
    },
    {
      "codeblockTitle": "fragment_review.xml",
      "code": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <ListView\n        android:id=\"@+id/movieListView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\"/>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:layout_marginTop=\"16dp\"\n        android:background=\"#F0F0F0\"\n        android:padding=\"16dp\">\n\n        <TextView\n            android:id=\"@+id/movieNameTextView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textStyle=\"bold\"\n            android:textSize=\"18sp\"/>\n\n        <TextView\n            android:id=\"@+id/yearTextView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:id=\"@+id/pointsTextView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:id=\"@+id/reviewTextView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"8dp\"/>\n    </LinearLayout>\n</LinearLayout>"
    },
    {
      "codeblockTitle": "ReviewViewFragment.java",
      "code": "\npackage com.example.myapplication;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport java.util.List;\nimport java.util.Locale;\n\npublic class ReviewViewFragment extends Fragment {\n    private ListView movieListView;  // ListView to display the list of movies\n    private TextView movieNameTextView;  // TextView to display the selected movie's name\n    private TextView yearTextView;  // TextView to display the selected movie's year\n    private TextView pointsTextView;  // TextView to display the selected movie's rating points\n    private TextView reviewTextView;  // TextView to display the selected movie's review\n    private MovieDatabaseHelper databaseHelper;  // Database helper for interacting with the SQLite database\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        // Inflate the fragment layout\n        View view = inflater.inflate(R.layout.fragment_review_view, container, false);\n\n        // Initialize the views from the layout\n        movieListView = view.findViewById(R.id.movieListView);\n        movieNameTextView = view.findViewById(R.id.movieNameTextView);\n        yearTextView = view.findViewById(R.id.yearTextView);\n        pointsTextView = view.findViewById(R.id.pointsTextView);\n        reviewTextView = view.findViewById(R.id.reviewTextView);\n\n        // Initialize the database helper\n        databaseHelper = new MovieDatabaseHelper(requireContext());\n\n        // Populate the ListView with movie names from the database\n        populateMovieList();\n\n        // Set up an item click listener for the ListView to show the details of the selected movie\n        movieListView.setOnItemClickListener(this::onMovieSelected);\n\n        return view;\n    }\n\n    void populateMovieList() {\n        // Retrieve all movie names from the database\n        List<String> movieNames = databaseHelper.getAllMovieNames();\n\n        // Create an ArrayAdapter to display the movie names in the ListView\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, movieNames);\n\n        // Set the adapter to the ListView, notify adapter about data change\n        movieListView.setAdapter(adapter);\n        adapter.notifyDataSetChanged(); // Notify the adapter to refresh the list\n    }\n\n\n    // This method is triggered when an item in the ListView is clicked\n    private void onMovieSelected(AdapterView<?> parent, View view, int position, long id) {\n        // Get the selected movie name from the ListView\n        String selectedMovie = (String) parent.getItemAtPosition(position);\n\n        // Retrieve the review details for the selected movie from the database\n        MovieDatabaseHelper.MovieReview review = databaseHelper.getMovieReviewDetails(selectedMovie);\n\n        if (review != null) {\n            // Display the movie review details in the TextViews\n            movieNameTextView.setText(String.format(\"Movie: %s\", review.movieName));\n            yearTextView.setText(String.format(\"Year: %d\", review.year));\n            pointsTextView.setText(String.format(Locale.getDefault(), \"Points: %.1f/5\", review.points));\n            reviewTextView.setText(String.format(\"Review: %s\", review.reviewText));\n        }\n    }\n}\n"
    },
    {
      "codeblockTitle": "item_review.xml",
      "code": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"10dp\"\n    android:background=\"@android:color/white\">\n\n    <TextView\n        android:id=\"@+id/textMovieName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textStyle=\"bold\"\n        android:textSize=\"16sp\"\n        android:text=\"Movie Name\" />\n\n    <TextView\n        android:id=\"@+id/textYear\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Year\" />\n\n    <TextView\n        android:id=\"@+id/textPoints\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Rating\" />\n\n    <TextView\n        android:id=\"@+id/textReviewText\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Review\" />\n</LinearLayout>\n"
    }
  ]
}
