{
  "snippets": [
    {
      "codeblockTitle": "MainActivity.java",
      "code": "\npackage com.example.myapplication;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.SimpleAdapter;\nimport android.widget.Toast;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MainActivity extends AppCompatActivity {\n    private DatabaseHelper dbHelper; // Database helper instance for handling database operations\n    private EditText editTextName, editTextEmail; // Input fields for user name and email\n    private Button buttonAdd, buttonUpdate, buttonDelete; // Buttons for adding, updating, and deleting users\n    private ListView listViewUsers; // ListView to display the list of users\n    private List<User> userList; // List to hold the user objects\n    private int selectedUserId = -1; // Variable to keep track of the selected user's ID for update or delete\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this); // Enable edge-to-edge display (full-screen layout)\n        setContentView(R.layout.activity_main); // Set the activity layout\n\n        // Set window insets to handle system bars (status bar, navigation bar)\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        // Initialize the database helper object\n        dbHelper = new DatabaseHelper(this);\n\n        // Initialize UI components (EditTexts, Buttons, ListView)\n        editTextName = findViewById(R.id.editTextName);\n        editTextEmail = findViewById(R.id.editTextEmail);\n        buttonAdd = findViewById(R.id.buttonAdd);\n        buttonUpdate = findViewById(R.id.buttonUpdate);\n        buttonDelete = findViewById(R.id.buttonDelete);\n        listViewUsers = findViewById(R.id.listViewUsers);\n\n        // Set up click listener for the Add button\n        buttonAdd.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Get the input data from EditText fields\n                String name = editTextName.getText().toString();\n                String email = editTextEmail.getText().toString();\n\n                // Check if inputs are not empty\n                if (!name.isEmpty() && !email.isEmpty()) {\n                    long result = dbHelper.insertUser(name, email); // Insert the user into the database\n                    if (result != -1) {\n                        Toast.makeText(MainActivity.this, \"User Added Successfully\", Toast.LENGTH_SHORT).show();\n                        refreshUserList(); // Refresh the ListView with the updated list of users\n                        clearInputs(); // Clear the input fields\n                    }\n                }\n            }\n        });\n\n        // Set up click listener for the Update button\n        buttonUpdate.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Check if a user is selected for updating\n                if (selectedUserId != -1) {\n                    User user = new User();\n                    user.setId(selectedUserId); // Set the ID of the user to be updated\n                    user.setName(editTextName.getText().toString()); // Set the new name\n                    user.setEmail(editTextEmail.getText().toString()); // Set the new email\n\n                    int rowsAffected = dbHelper.updateUser(user); // Update the user in the database\n                    if (rowsAffected > 0) {\n                        Toast.makeText(MainActivity.this, \"User Updated Successfully\", Toast.LENGTH_SHORT).show();\n                        refreshUserList(); // Refresh the user list in the ListView\n                        clearInputs(); // Clear the input fields\n                    }\n                }\n            }\n        });\n\n        // Set up click listener for the Delete button\n        buttonDelete.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Check if a user is selected for deletion\n                if (selectedUserId != -1) {\n                    User user = new User();\n                    user.setId(selectedUserId); // Set the ID of the user to be deleted\n\n                    dbHelper.deleteUser(user); // Delete the user from the database\n                    Toast.makeText(MainActivity.this, \"User Deleted Successfully\", Toast.LENGTH_SHORT).show();\n                    refreshUserList(); // Refresh the ListView to show the updated list\n                    clearInputs(); // Clear the input fields\n                }\n            }\n        });\n\n        // Set up ListView item click listener for selecting a user for update/delete\n        listViewUsers.setOnItemClickListener((parent, view, position, id) -> {\n            User selectedUser = userList.get(position); // Get the selected user\n            selectedUserId = selectedUser.getId(); // Set the selected user's ID for future operations\n            // Populate input fields with selected user's details for update\n            editTextName.setText(selectedUser.getName());\n            editTextEmail.setText(selectedUser.getEmail());\n        });\n\n        // Populate the user list initially\n        refreshUserList();\n    }\n\n    // Method to refresh the user list in the ListView\n    private void refreshUserList() {\n        userList = dbHelper.getAllUsers(); // Retrieve all users from the database\n\n        // Create a list of maps to pass to the SimpleAdapter\n        List<Map<String, String>> data = new ArrayList<>();\n        for (User user : userList) {\n            Map<String, String> map = new HashMap<>();\n            map.put(\"name\", user.getName()); // Store the user's name\n            map.put(\"email\", user.getEmail()); // Store the user's email\n            data.add(map); // Add the user details to the data list\n        }\n\n        // Create a SimpleAdapter to bind the data to the ListView\n        SimpleAdapter adapter = new SimpleAdapter(\n                this,\n                data,\n                android.R.layout.simple_list_item_2, // Layout for each item\n                new String[]{\"name\", \"email\"}, // Keys to extract from data\n                new int[]{android.R.id.text1, android.R.id.text2} // TextView IDs to bind data to\n        );\n\n        listViewUsers.setAdapter(adapter); // Set the adapter to the ListView\n    }\n\n    // Method to clear input fields after operation (Add/Update/Delete)\n    private void clearInputs() {\n        editTextName.setText(\"\"); // Clear the name input field\n        editTextEmail.setText(\"\"); // Clear the email input field\n        selectedUserId = -1; // Reset the selected user ID\n    }\n}\n"
    },
    {
      "codeblockTitle": "activity_main.xml",
      "code": "\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\"\n    tools:context=\".MainActivity\">\n\n    <EditText\n        android:id=\"@+id/editTextName\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Enter Name\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n    <EditText\n        android:id=\"@+id/editTextEmail\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Enter Email\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintTop_toBottomOf=\"@id/editTextName\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n    <LinearLayout\n        android:id=\"@+id/buttonLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintTop_toBottomOf=\"@id/editTextEmail\">\n\n        <Button\n            android:id=\"@+id/buttonAdd\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Add\"\n            android:layout_marginEnd=\"4dp\"/>\n\n        <Button\n            android:id=\"@+id/buttonUpdate\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Update\"\n            android:layout_marginStart=\"4dp\"\n            android:layout_marginEnd=\"4dp\"/>\n\n        <Button\n            android:id=\"@+id/buttonDelete\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Delete\"\n            android:layout_marginStart=\"4dp\"/>\n    </LinearLayout>\n\n    <ListView\n        android:id=\"@+id/listViewUsers\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintTop_toBottomOf=\"@id/buttonLayout\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"/>\n\n</androidx.constraintlayout.widget.ConstraintLayout>"
    },
    {
      "codeblockTitle": "DatabaseHelper.java",
      "code": "\npackage com.example.myapplication;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseHelper extends SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"UserDatabase\"; // Database name\n    private static final int DATABASE_VERSION = 1; // Database version\n\n    // Table and column names\n    public static final String TABLE_USERS = \"users\"; // Table name\n    public static final String COLUMN_ID = \"id\"; // Column for user ID\n    public static final String COLUMN_NAME = \"name\"; // Column for user name\n    public static final String COLUMN_EMAIL = \"email\"; // Column for user email\n\n    // Create table SQL query\n    private static final String CREATE_USERS_TABLE =\n            \"CREATE TABLE \" + TABLE_USERS + \"(\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                    + COLUMN_NAME + \" TEXT, \"\n                    + COLUMN_EMAIL + \" TEXT)\";\n\n    // Constructor for the DatabaseHelper\n    public DatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION); // Call the parent constructor\n    }\n\n    // Called when the database is created for the first time\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        // Execute the SQL query to create the users table\n        db.execSQL(CREATE_USERS_TABLE);\n    }\n\n    // Called when the database needs to be upgraded (e.g., version change)\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        // Drop the old table if it exists\n        db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_USERS);\n\n        // Create the table again\n        onCreate(db);\n    }\n\n    // Method to insert a new user into the database\n    public long insertUser(String name, String email) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get a writable database\n\n        ContentValues values = new ContentValues(); // Create a ContentValues object to hold the values\n        values.put(COLUMN_NAME, name); // Put the name into the ContentValues\n        values.put(COLUMN_EMAIL, email); // Put the email into the ContentValues\n\n        // Insert the row into the database and return the row ID\n        return db.insert(TABLE_USERS, null, values);\n    }\n\n    // Method to get all users from the database\n    public List<User> getAllUsers() {\n        List<User> userList = new ArrayList<>(); // Create a list to hold the users\n\n        // Select all query to fetch users from the database\n        String selectQuery = \"SELECT * FROM \" + TABLE_USERS;\n\n        SQLiteDatabase db = this.getReadableDatabase(); // Get a readable database\n        Cursor cursor = db.rawQuery(selectQuery, null); // Execute the query\n\n        // Loop through all rows in the result set and add them to the list\n        if (cursor.moveToFirst()) {\n            do {\n                User user = new User(); // Create a new User object\n                user.setId(cursor.getInt(cursor.getColumnIndex(COLUMN_ID))); // Set the user's ID\n                user.setName(cursor.getString(cursor.getColumnIndex(COLUMN_NAME))); // Set the user's name\n                user.setEmail(cursor.getString(cursor.getColumnIndex(COLUMN_EMAIL))); // Set the user's email\n\n                userList.add(user); // Add the user to the list\n            } while (cursor.moveToNext()); // Continue if there are more rows\n        }\n\n        cursor.close(); // Close the cursor\n        return userList; // Return the list of users\n    }\n\n    // Method to update a user's details in the database\n    public int updateUser(User user) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get a writable database\n\n        ContentValues values = new ContentValues(); // Create a ContentValues object to hold the updated values\n        values.put(COLUMN_NAME, user.getName()); // Update the name\n        values.put(COLUMN_EMAIL, user.getEmail()); // Update the email\n\n        // Update the row with the specified user ID and return the number of rows affected\n        return db.update(TABLE_USERS, values, COLUMN_ID + \" = ?\",\n                new String[] { String.valueOf(user.getId()) });\n    }\n\n    // Method to delete a user from the database\n    public void deleteUser(User user) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get a writable database\n\n        // Delete the user row with the specified ID\n        db.delete(TABLE_USERS, COLUMN_ID + \" = ?\",\n                new String[] { String.valueOf(user.getId()) });\n\n        db.close(); // Close the database connection\n    }\n}\n"
    },
    {
      "codeblockTitle": "User.java",
      "code": "\npackage com.example.myapplication;\n\npublic class User {\n    private int id; // User ID (primary key)\n    private String name; // User's name\n    private String email; // User's email\n\n    // Default constructor (required for SQLite database operations)\n    public User() {}\n\n    // Parameterized constructor to create a User with a name and email\n    public User(String name, String email) {\n        this.name = name; // Set the user's name\n        this.email = email; // Set the user's email\n    }\n\n    // Getter for the user's ID\n    public int getId() {\n        return id;\n    }\n\n    // Setter for the user's ID\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    // Getter for the user's name\n    public String getName() {\n        return name;\n    }\n\n    // Setter for the user's name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Getter for the user's email\n    public String getEmail() {\n        return email;\n    }\n\n    // Setter for the user's email\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n"
    }
    
  ]
}
