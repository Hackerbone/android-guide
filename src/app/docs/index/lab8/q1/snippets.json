{
  "snippets": [
    {
      "codeblockTitle": "MainActivity.java",
      "code": "package com.example.myapplication;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.DatePicker;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.Spinner;\nimport android.widget.Toast;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\n\npublic class MainActivity extends AppCompatActivity {\n    private List<Task> taskList; // List to store tasks\n    private TaskAdapter taskAdapter; // Custom adapter for displaying tasks in ListView\n    private ListView listViewTasks; // ListView to display tasks\n    private Button btnAddTask; // Button to add new tasks\n    private TaskDatabaseHelper dbHelper;\n    @Override\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        dbHelper = new TaskDatabaseHelper(this); // Initialize database helper\n\n        // Initialize UI components\n        listViewTasks = findViewById(R.id.listViewTasks);\n        btnAddTask = findViewById(R.id.btnAddTask);\n\n        // Load tasks from database\n        taskList = dbHelper.getAllTasks();\n        taskAdapter = new TaskAdapter(this, taskList);\n        listViewTasks.setAdapter(taskAdapter);\n\n        // Set click listener for \"Add Task\" button\n        btnAddTask.setOnClickListener(v -> showAddTaskDialog(null, -1));\n\n        // Set click listener for list items (to edit or delete tasks)\n        listViewTasks.setOnItemClickListener((parent, view, position, id) -> {\n            showTaskOptionsDialog(position);\n        });\n    }\n\n\n    // Method to show dialog for adding or editing a task\n    private void showAddTaskDialog(Task taskToEdit, int position) {\n        // Create an AlertDialog for task input\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        LayoutInflater inflater = getLayoutInflater();\n        View dialogView = inflater.inflate(R.layout.dialog_add_task, null);\n        builder.setView(dialogView);\n\n        // Initialize dialog UI components\n        EditText editTextTaskName = dialogView.findViewById(R.id.editTextTaskName);\n        DatePicker datePicker = dialogView.findViewById(R.id.datePicker);\n        Spinner spinnerPriority = dialogView.findViewById(R.id.spinnerPriority);\n        Button btnSave = dialogView.findViewById(R.id.btnSave);\n        Button btnCancel = dialogView.findViewById(R.id.btnCancel);\n\n        // Setup priority spinner with values from resources\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(\n                this, R.array.priority_levels, android.R.layout.simple_spinner_item);\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        spinnerPriority.setAdapter(adapter);\n\n        // If editing an existing task, populate fields with existing data\n        if (taskToEdit != null) {\n            editTextTaskName.setText(taskToEdit.getName());\n\n            // Set date picker to match the task's due date\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime(taskToEdit.getDueDate());\n            datePicker.updateDate(\n                    calendar.get(Calendar.YEAR),\n                    calendar.get(Calendar.MONTH),\n                    calendar.get(Calendar.DAY_OF_MONTH)\n            );\n\n            // Set selected priority level in spinner\n            String priority = taskToEdit.getPriority();\n            int priorityPosition = 0;\n            if (priority.equals(\"Medium\")) priorityPosition = 1;\n            else if (priority.equals(\"Low\")) priorityPosition = 2;\n            spinnerPriority.setSelection(priorityPosition);\n        }\n\n        // Create and show the dialog\n        AlertDialog dialog = builder.create();\n        dialog.show();\n\n        // Set click listener for save button\n        btnSave.setOnClickListener(v -> {\n            String taskName = editTextTaskName.getText().toString().trim();\n            if (taskName.isEmpty()) {\n                Toast.makeText(MainActivity.this, \"Please enter a task name\", Toast.LENGTH_SHORT).show();\n                return;\n            }\n\n            Calendar calendar = Calendar.getInstance();\n            calendar.set(datePicker.getYear(), datePicker.getMonth(), datePicker.getDayOfMonth());\n            Date dueDate = calendar.getTime();\n            String priority = spinnerPriority.getSelectedItem().toString();\n\n            if (taskToEdit == null) {\n                Task newTask = new Task(taskName, dueDate, priority);\n                dbHelper.addTask(newTask);\n                taskList.add(newTask);\n                Toast.makeText(MainActivity.this, \"Task added\", Toast.LENGTH_SHORT).show();\n            } else {\n                taskToEdit.setName(taskName);\n                taskToEdit.setDueDate(dueDate);\n                taskToEdit.setPriority(priority);\n                dbHelper.updateTask(taskToEdit);\n                Toast.makeText(MainActivity.this, \"Task updated\", Toast.LENGTH_SHORT).show();\n            }\n\n            taskAdapter.notifyDataSetChanged();\n            dialog.dismiss();\n        });\n\n\n        // Set click listener for cancel button\n        btnCancel.setOnClickListener(v -> dialog.dismiss());\n    }\n\n    // Method to show dialog for task options (Edit/Delete)\n    private void showTaskOptionsDialog(int position) {\n        Task selectedTask = taskList.get(position);\n\n        // Create AlertDialog with options to edit or delete task\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(\"Task Options\")\n                .setItems(new String[]{\"Edit\", \"Delete\"}, (dialog, which) -> {\n                    if (which == 0) {\n                        // If \"Edit\" is selected, open edit dialog\n                        showAddTaskDialog(selectedTask, position);\n                    } else {\n                        // If \"Delete\" is selected, remove task from list\n                        dbHelper.deleteTask(selectedTask.getId());\n                        taskList.remove(position);\n                        taskAdapter.notifyDataSetChanged();\n                        Toast.makeText(MainActivity.this, \"Task deleted\", Toast.LENGTH_SHORT).show();\n                    }\n                })\n                .setNegativeButton(\"Cancel\", (dialog, which) -> dialog.dismiss());\n\n        builder.create().show();\n    }\n}\n"
    },
    {
      "codeblockTitle": "Task.java",
      "code": "package com.example.myapplication;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\n\npublic class Task {\n    private int id;\n    private String name;\n    private Date dueDate;\n    private String priority;\n\n    public Task(int id, String name, Date dueDate, String priority) {\n        this.id = id;\n        this.name = name;\n        this.dueDate = dueDate;\n        this.priority = priority;\n    }\n\n    public Task(String name, Date dueDate, String priority) {\n        this.name = name;\n        this.dueDate = dueDate;\n        this.priority = priority;\n    }\n\n    public int getId() { return id; }\n    public void setId(int id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public Date getDueDate() { return dueDate; }\n    public void setDueDate(Date dueDate) { this.dueDate = dueDate; }\n\n    public String getPriority() { return priority; }\n    public void setPriority(String priority) { this.priority = priority; }\n\n    public String getFormattedDueDate() {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.getDefault());\n        return sdf.format(dueDate);\n    }\n}\n"
    }
    ,{
      "codeblockTitle": "TaskDatabaseHelper.java",
      "code": "package com.example.myapplication;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\n\n// This class manages SQLite database operations for tasks.\npublic class TaskDatabaseHelper extends SQLiteOpenHelper {\n    // Database Name and Version\n    private static final String DATABASE_NAME = \"tasks.db\";\n    private static final int DATABASE_VERSION = 1;\n\n    // Table and Column Names\n    private static final String TABLE_TASKS = \"tasks\";\n    private static final String COLUMN_ID = \"id\";\n    private static final String COLUMN_NAME = \"name\";\n    private static final String COLUMN_DUE_DATE = \"due_date\";\n    private static final String COLUMN_PRIORITY = \"priority\";\n\n    // Date format for storing dates as Strings in the database\n    private static final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault());\n\n    // Constructor to initialize the database helper\n    public TaskDatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    // This method is called when the database is created for the first time.\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        // Create tasks table\n        String createTable = \"CREATE TABLE \" + TABLE_TASKS + \" (\" +\n                COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" + // Auto-incremented primary key\n                COLUMN_NAME + \" TEXT, \" +  // Task name\n                COLUMN_DUE_DATE + \" TEXT, \" + // Due date stored as a string\n                COLUMN_PRIORITY + \" TEXT)\"; // Priority level of the task\n        db.execSQL(createTable); // Execute the SQL statement\n    }\n\n    // This method is called when the database needs to be upgraded (e.g., schema changes).\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        // Drop the existing table and recreate it\n        db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_TASKS);\n        onCreate(db);\n    }\n\n    // Method to insert a new task into the database\n    public void addTask(Task task) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get database in write mode\n        ContentValues values = new ContentValues(); // Create a ContentValues object to store task details\n        values.put(COLUMN_NAME, task.getName()); // Store task name\n        values.put(COLUMN_DUE_DATE, sdf.format(task.getDueDate())); // Convert Date to String format\n        values.put(COLUMN_PRIORITY, task.getPriority()); // Store priority level\n\n        db.insert(TABLE_TASKS, null, values); // Insert values into the database\n        db.close(); // Close database connection\n    }\n\n    // Method to retrieve all tasks from the database\n    public List<Task> getAllTasks() {\n        List<Task> taskList = new ArrayList<>(); // List to store retrieved tasks\n        SQLiteDatabase db = this.getReadableDatabase(); // Get database in read mode\n\n        // Query to retrieve all tasks sorted by due date in ascending order\n        Cursor cursor = db.query(TABLE_TASKS, null, null, null, null, null, COLUMN_DUE_DATE + \" ASC\");\n\n        if (cursor.moveToFirst()) { // Check if the cursor contains data\n            do {\n                int id = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_ID)); // Retrieve task ID\n                String name = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME)); // Retrieve task name\n                String dueDateStr = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DUE_DATE)); // Retrieve due date string\n                String priority = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_PRIORITY)); // Retrieve priority level\n\n                Date dueDate;\n                try {\n                    dueDate = sdf.parse(dueDateStr); // Convert String to Date\n                } catch (ParseException e) {\n                    dueDate = new Date(); // Default to the current date if parsing fails\n                }\n\n                // Create Task object and add it to the list\n                Task task = new Task(id, name, dueDate, priority);\n                taskList.add(task);\n            } while (cursor.moveToNext()); // Move to the next record\n        }\n\n        cursor.close(); // Close cursor\n        db.close(); // Close database connection\n\n        return taskList; // Return the list of tasks\n    }\n\n    // Method to update an existing task in the database\n    public void updateTask(Task task) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get database in write mode\n        ContentValues values = new ContentValues(); // Create ContentValues object for update\n        values.put(COLUMN_NAME, task.getName()); // Update task name\n        values.put(COLUMN_DUE_DATE, sdf.format(task.getDueDate())); // Convert Date to String and update\n        values.put(COLUMN_PRIORITY, task.getPriority()); // Update priority\n\n        // Update the record where ID matches the given task's ID\n        db.update(TABLE_TASKS, values, COLUMN_ID + \" = ?\", new String[]{String.valueOf(task.getId())});\n        db.close(); // Close database connection\n    }\n\n    // Method to delete a task from the database\n    public void deleteTask(int taskId) {\n        SQLiteDatabase db = this.getWritableDatabase(); // Get database in write mode\n        // Delete the record where ID matches the given task ID\n        db.delete(TABLE_TASKS, COLUMN_ID + \" = ?\", new String[]{String.valueOf(taskId)});\n        db.close(); // Close database connection\n    }\n}\n"
    }
    ,{
      "codeblockTitle": "TaskAdapter.java",
      "code": "package com.example.myapplication;\n\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport java.util.List;\n\n// Custom adapter for displaying Task objects in a ListView\npublic class TaskAdapter extends ArrayAdapter<Task> {\n\n    // Constructor to initialize the adapter with context and list of tasks\n    public TaskAdapter(Context context, List<Task> tasks) {\n        super(context, 0, tasks); // Call the superclass constructor with context and task list\n    }\n\n    @Override\n    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\n        // Get the task object for the current position in the list\n        Task task = getItem(position);\n\n        // Check if a reusable view (convertView) exists, if not, inflate a new layout\n        if (convertView == null) {\n            convertView = LayoutInflater.from(getContext()).inflate(R.layout.list_item_task, parent, false);\n        }\n\n        // Find UI elements in the list item layout\n        TextView tvTaskName = convertView.findViewById(R.id.tvTaskName);\n        TextView tvDueDate = convertView.findViewById(R.id.tvDueDate);\n        TextView tvPriority = convertView.findViewById(R.id.tvPriority);\n\n        // Populate the UI elements with task data\n        tvTaskName.setText(task.getName()); // Set task name\n        tvDueDate.setText(\"Due: \" + task.getFormattedDueDate()); // Set formatted due date\n        tvPriority.setText(task.getPriority()); // Set priority level text\n\n        // Change text color based on priority level\n        switch (task.getPriority()) {\n            case \"High\":\n                tvPriority.setTextColor(Color.RED); // High priority = Red\n                break;\n            case \"Medium\":\n                tvPriority.setTextColor(Color.rgb(255, 165, 0)); // Medium priority = Orange\n                break;\n            case \"Low\":\n                tvPriority.setTextColor(Color.GREEN); // Low priority = Green\n                break;\n        }\n\n        // Return the completed view for display in the ListView\n        return convertView;\n    }\n}\n"
    }
    ,{
      "codeblockTitle": "activity_main.xml",
      "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textViewTitle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:text=\"Task Manager\"\n        android:textSize=\"24sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <ListView\n        android:id=\"@+id/listViewTasks\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"16dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginBottom=\"8dp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/btnAddTask\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewTitle\" />\n\n    <Button\n        android:id=\"@+id/btnAddTask\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"16dp\"\n        android:layout_marginEnd=\"16dp\"\n        android:layout_marginBottom=\"16dp\"\n        android:text=\"Add New Task\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>"
    }
    ,{
      "codeblockTitle": "dialog_add_task.xml",
      "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Task Details\"\n        android:textSize=\"20sp\"\n        android:textStyle=\"bold\"\n        android:gravity=\"center\"\n        android:layout_marginBottom=\"16dp\" />\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Task Name:\" />\n\n    <EditText\n        android:id=\"@+id/editTextTaskName\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Enter task name\"\n        android:inputType=\"text\"\n        android:layout_marginBottom=\"8dp\" />\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Due Date:\" />\n\n    <DatePicker\n        android:id=\"@+id/datePicker\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:calendarViewShown=\"false\"\n        android:datePickerMode=\"spinner\"\n        android:layout_marginBottom=\"8dp\" />\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Priority:\" />\n\n    <Spinner\n        android:id=\"@+id/spinnerPriority\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"16dp\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <Button\n            android:id=\"@+id/btnCancel\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:layout_marginEnd=\"4dp\"\n            android:text=\"Cancel\" />\n\n        <Button\n            android:id=\"@+id/btnSave\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:layout_marginStart=\"4dp\"\n            android:text=\"Save\" />\n    </LinearLayout>\n</LinearLayout>"
    }
    ,{
      "codeblockTitle": "list_item.xml",
      "code": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"12dp\">\n\n    <TextView\n        android:id=\"@+id/tvTaskName\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        android:text=\"Task Name\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        android:layout_marginTop=\"4dp\">\n\n        <TextView\n            android:id=\"@+id/tvDueDate\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Due: Jan 1, 2025\" />\n\n        <TextView\n            android:id=\"@+id/tvPriority\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"High\"\n            android:textStyle=\"bold\" />\n    </LinearLayout>\n</LinearLayout>"
    }
    ,{
      "codeblockTitle": "values/strings.xml",
      "code": "<resources>\n    <string name=\"app_name\">Task Manager</string>\n    <string-array name=\"priority_levels\">\n        <item>High</item>\n        <item>Medium</item>\n        <item>Low</item>\n    </string-array>\n</resources>"
    }
  ]
}
