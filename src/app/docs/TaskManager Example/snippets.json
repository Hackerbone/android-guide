{
    "snippets": [
      {
        "codeblockTitle": "DBHelper.kt - SQLite Database Helper",
        "code": "package com.example.taskman\n\nimport android.content.ContentValues\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.sqlite.SQLiteOpenHelper\n\nclass DBHelper(context: Context) : SQLiteOpenHelper(context, \"TasksDB\", null, 1) {\n    override fun onCreate(db: SQLiteDatabase) {\n        val createTable = \"CREATE TABLE Tasks (id INTEGER PRIMARY KEY, name TEXT, dueDate TEXT, priority TEXT)\"\n        db.execSQL(createTable)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.execSQL(\"DROP TABLE IF EXISTS Tasks\")\n        onCreate(db)\n    }\n\n    fun insertTask(name: String, dueDate: String, priority: String) {\n        val db = writableDatabase\n        val values = ContentValues().apply {\n            put(\"name\", name)\n            put(\"dueDate\", dueDate)\n            put(\"priority\", priority)\n        }\n        db.insert(\"Tasks\", null, values)\n        db.close()\n    }\n\n    fun getTasks(): List<Task> {\n        val tasks = mutableListOf<Task>()\n        val db = readableDatabase\n        val cursor = db.rawQuery(\"SELECT * FROM Tasks\", null)\n        while (cursor.moveToNext()) {\n            val task = Task(cursor.getInt(0), cursor.getString(1), cursor.getString(2), cursor.getString(3))\n            tasks.add(task)\n        }\n        cursor.close()\n        db.close()\n        return tasks\n    }\n\n    fun deleteTask(id: Int) {\n        val db = writableDatabase\n        db.delete(\"Tasks\", \"id=?\", arrayOf(id.toString()))\n        db.close()\n    }\n}"
      },
      {
        "codeblockTitle": "Task.kt - Data Model",
        "code": "package com.example.taskman\n\ndata class Task(\n    val id: Int,\n    val name: String,\n    val dueDate: String,\n    val priority: String\n)"
      },
      {
        "codeblockTitle": "TaskAdapter.kt - RecyclerView Adapter",
        "code": "package com.example.taskman\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\n\nclass TaskAdapter(private val tasks: List<Task>, private val dbHelper: DBHelper, private val refreshList: () -> Unit) : RecyclerView.Adapter<TaskAdapter.TaskViewHolder>() {\n    inner class TaskViewHolder(val view: View) : RecyclerView.ViewHolder(view)\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.task_item, parent, false)\n        return TaskViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: TaskViewHolder, position: Int) {\n        val task = tasks[position]\n        holder.view.findViewById<TextView>(R.id.taskName).text = task.name\n        holder.view.findViewById<TextView>(R.id.taskDueDate).text = task.dueDate\n        holder.view.findViewById<TextView>(R.id.taskPriority).text = task.priority\n        holder.view.findViewById<Button>(R.id.deleteTask).setOnClickListener {\n            dbHelper.deleteTask(task.id)\n            refreshList()\n        }\n    }\n\n    override fun getItemCount() = tasks.size\n}"
      },
      {
        "codeblockTitle": "MainActivity.kt - Main Activity",
        "code": "package com.example.taskman\n\nimport android.os.Bundle\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var dbHelper: DBHelper\n    private lateinit var recyclerView: RecyclerView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        dbHelper = DBHelper(this)\n        recyclerView = findViewById(R.id.recyclerView)\n        recyclerView.layoutManager = LinearLayoutManager(this)\n\n        findViewById<Button>(R.id.addTaskButton).setOnClickListener {\n            val name = findViewById<EditText>(R.id.taskNameInput).text.toString()\n            val dueDate = findViewById<EditText>(R.id.taskDueDateInput).text.toString()\n            val priority = findViewById<Spinner>(R.id.taskPriorityInput).selectedItem.toString()\n            if (name.isNotEmpty() && dueDate.isNotEmpty()) {\n                dbHelper.insertTask(name, dueDate, priority)\n                refreshTaskList()\n            }\n        }\n        refreshTaskList()\n    }\n\n    private fun refreshTaskList() {\n        val tasks = dbHelper.getTasks()\n        recyclerView.adapter = TaskAdapter(tasks, dbHelper, this::refreshTaskList)\n    }\n}"
      }
    ]
  }
  