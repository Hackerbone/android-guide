{
  "snippets": [
    
    {
      "codeblockTitle": "Example",
      "code": "\nMainActivity.java \n\npackage com.example.endsem;\n\nimport android.app.DatePickerDialog;\nimport android.content.*;\nimport android.database.Cursor;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.*;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport java.util.Calendar;\n\npublic class MainActivity extends AppCompatActivity {\n\n    Spinner spinner;\n    TextView dateText, durationText;\n    SeekBar seekBar;\n    Button pickDateBtn, submitBtn, viewTripsBtn, logoutBtn;\n\n    DatabaseHelper db;\n    SharedPreferences prefs;\n    String username;\n\n    @Override\n    protected void onCreate(Bundle b) {\n        super.onCreate(b);\n        setContentView(R.layout.activity_main);\n\n        db = new DatabaseHelper(this);\n        prefs = getSharedPreferences(\"prefs\", MODE_PRIVATE);\n        username = prefs.getString(\"logged_user\", \"\");\n\n        spinner = findViewById(R.id.spinner);\n        dateText = findViewById(R.id.dateText);\n        durationText = findViewById(R.id.durationText);\n        seekBar = findViewById(R.id.seekBar);\n        pickDateBtn = findViewById(R.id.pickDate);\n        submitBtn = findViewById(R.id.submitBtn);\n        viewTripsBtn = findViewById(R.id.viewTrips);\n        logoutBtn = findViewById(R.id.logoutBtn);\n\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.destinations, android.R.layout.simple_spinner_item);\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        spinner.setAdapter(adapter);\n\n        // Load saved spinner choice\n        spinner.setSelection(prefs.getInt(\"spinner_index\", 0));\n\n        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            public void onProgressChanged(SeekBar s, int p, boolean f) {\n                durationText.setText(p + \" Days\");\n            }\n\n            public void onStartTrackingTouch(SeekBar seekBar) {}\n            public void onStopTrackingTouch(SeekBar seekBar) {}\n        });\n\n        pickDateBtn.setOnClickListener(v -> {\n            Calendar c = Calendar.getInstance();\n            DatePickerDialog d = new DatePickerDialog(this, (view, year, month, day) -> {\n                dateText.setText(day + \"/\" + (month+1) + \"/\" + year);\n            }, c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH));\n            d.show();\n        });\n\n        submitBtn.setOnClickListener(v -> {\n            String dest = spinner.getSelectedItem().toString();\n            String date = dateText.getText().toString();\n            int duration = seekBar.getProgress();\n\n            db.addTrip(username, dest, date, duration);\n            prefs.edit().putInt(\"spinner_index\", spinner.getSelectedItemPosition()).apply();\n            Toast.makeText(this, \"Trip Saved!\", Toast.LENGTH_SHORT).show();\n        });\n\n        viewTripsBtn.setOnClickListener(v -> {\n            startActivity(new Intent(this, TripListActivity.class));\n        });\n\n        logoutBtn.setOnClickListener(v -> {\n            prefs.edit().remove(\"logged_user\").apply();\n            startActivity(new Intent(this, LoginActivity.class));\n            finish();\n        });\n    }\n}\n\n\n\n\n\n\nLoginActivity.java\n\npackage com.example.endsem;\n\nimport android.content.*;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.*;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class LoginActivity extends AppCompatActivity {\n\n    EditText username, password;\n    Button loginBtn, registerBtn;\n    DatabaseHelper db;\n    SharedPreferences prefs;\n\n    @Override\n    protected void onCreate(Bundle b) {\n        super.onCreate(b);\n        setContentView(R.layout.activity_login);\n\n        db = new DatabaseHelper(this);\n        prefs = getSharedPreferences(\"prefs\", MODE_PRIVATE);\n\n        username = findViewById(R.id.username);\n        password = findViewById(R.id.password);\n        loginBtn = findViewById(R.id.login);\n        registerBtn = findViewById(R.id.register);\n\n        loginBtn.setOnClickListener(v -> {\n            String user = username.getText().toString();\n            String pass = password.getText().toString();\n            if (db.login(user, pass)) {\n                prefs.edit().putString(\"logged_user\", user).apply();\n                startActivity(new Intent(this, MainActivity.class));\n                finish();\n            } else {\n                Toast.makeText(this, \"Login Failed\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        registerBtn.setOnClickListener(v -> {\n            startActivity(new Intent(this, RegisterActivity.class));\n        });\n    }\n}\n\n\n\n\n\nRegisterActivity.java\n\npackage com.example.endsem;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.*;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class RegisterActivity extends AppCompatActivity {\n\n    EditText username, password;\n    Button registerBtn;\n    DatabaseHelper db;\n\n    @Override\n    protected void onCreate(Bundle b) {\n        super.onCreate(b);\n        setContentView(R.layout.activity_register);\n\n        db = new DatabaseHelper(this);\n\n        username = findViewById(R.id.username);\n        password = findViewById(R.id.password);\n        registerBtn = findViewById(R.id.register);\n\n        registerBtn.setOnClickListener(v -> {\n            if (db.register(username.getText().toString(), password.getText().toString())) {\n                Toast.makeText(this, \"Registered!\", Toast.LENGTH_SHORT).show();\n                finish();\n            } else {\n                Toast.makeText(this, \"Registration Failed\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n}\n\n\n\n\n\nTripListActivity.java\n\n\npackage com.example.endsem;\n\nimport android.content.SharedPreferences;\nimport android.database.Cursor;\nimport android.os.Bundle;\nimport android.widget.*;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class TripListActivity extends AppCompatActivity {\n    ListView listView;\n    DatabaseHelper db;\n    SharedPreferences prefs;\n\n    @Override\n    protected void onCreate(Bundle b) {\n        super.onCreate(b);\n        setContentView(R.layout.activity_trip_list);\n\n        listView = findViewById(R.id.listView);\n        db = new DatabaseHelper(this);\n        prefs = getSharedPreferences(\"prefs\", MODE_PRIVATE);\n\n        String username = prefs.getString(\"logged_user\", \"\");\n        Cursor cursor = db.getTrips(username);\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);\n        while (cursor.moveToNext()) {\n            adapter.add(\"Destination: \" + cursor.getString(2) + \"\nDate: \" + cursor.getString(3) + \"\nDuration: \" + cursor.getInt(4) + \" Days\");\n        }\n\n        listView.setAdapter(adapter);\n    }\n}\n\n\n\n\n\n\nDatabaseHelper.java\n\npackage com.example.endsem;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.*;\n\npublic class DatabaseHelper extends SQLiteOpenHelper {\n    public static final String DB_NAME = \"TravelApp.db\";\n\n    public DatabaseHelper(Context context) {\n        super(context, DB_NAME, null, 1);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(\"CREATE TABLE users(id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT)\");\n        db.execSQL(\"CREATE TABLE trips(id INTEGER PRIMARY KEY AUTOINCREMENT, user TEXT, destination TEXT, date TEXT, duration INTEGER)\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldV, int newV) {\n        db.execSQL(\"DROP TABLE IF EXISTS users\");\n        db.execSQL(\"DROP TABLE IF EXISTS trips\");\n        onCreate(db);\n    }\n\n    public boolean register(String username, String password) {\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues c = new ContentValues();\n        c.put(\"username\", username);\n        c.put(\"password\", password);\n        long res = db.insert(\"users\", null, c);\n        return res != -1;\n    }\n\n    public boolean login(String username, String password) {\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cur = db.rawQuery(\"SELECT * FROM users WHERE username=? AND password=?\", new String[]{username, password});\n        return cur.getCount() > 0;\n    }\n\n    public void addTrip(String username, String dest, String date, int duration) {\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues c = new ContentValues();\n        c.put(\"user\", username);\n        c.put(\"destination\", dest);\n        c.put(\"date\", date);\n        c.put(\"duration\", duration);\n        db.insert(\"trips\", null, c);\n    }\n\n    public Cursor getTrips(String username) {\n        SQLiteDatabase db = this.getReadableDatabase();\n        return db.rawQuery(\"SELECT * FROM trips WHERE user=?\", new String[]{username});\n    }\n}\n\n\n\n\n\n\nactivity_main.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:padding=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <LinearLayout\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <TextView\n            android:text=\"Select Destination\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/>\n\n        <Spinner\n            android:id=\"@+id/spinner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:minHeight=\"48dp\" />\n\n        <Button\n            android:id=\"@+id/pickDate\"\n            android:text=\"Pick Travel Date\"\n            android:layout_marginTop=\"16dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:id=\"@+id/dateText\"\n            android:text=\"Selected Date\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"8dp\"\n            android:padding=\"4dp\"\n            android:background=\"#EEEEEE\"/>\n\n        <TextView\n            android:text=\"Trip Duration (in Days)\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"16dp\"/>\n\n        <SeekBar\n            android:id=\"@+id/seekBar\"\n            android:max=\"30\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:id=\"@+id/durationText\"\n            android:text=\"0 Days\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"8dp\"/>\n\n        <Button\n            android:id=\"@+id/submitBtn\"\n            android:text=\"Submit Trip\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"20dp\"/>\n\n        <Button\n            android:id=\"@+id/viewTrips\"\n            android:text=\"View Planned Trips\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"10dp\"/>\n\n        <Button\n            android:id=\"@+id/logoutBtn\"\n            android:text=\"Logout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"20dp\"/>\n\n    </LinearLayout>\n</ScrollView>\n\n\n\n\n\nactivity_login.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"24dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/username\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Username\"\n        android:minHeight=\"48dp\" />\n\n    <EditText\n        android:id=\"@+id/password\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"12dp\"\n        android:hint=\"Password\"\n        android:inputType=\"textPassword\"\n        android:minHeight=\"48dp\" />\n\n    <Button\n        android:id=\"@+id/login\"\n        android:text=\"Login\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"/>\n\n    <Button\n        android:id=\"@+id/register\"\n        android:text=\"Register\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"/>\n\n</LinearLayout>\n\n\n\n\n\n\nactivity_trip_list.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:padding=\"16dp\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <TextView\n        android:text=\"Your Planned Trips\"\n        android:textStyle=\"bold\"\n        android:textSize=\"18sp\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"10dp\"/>\n\n    <ListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n</LinearLayout>\n\n\n\n\n\nactivity_register.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"24dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/username\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"New Username\"\n        android:minHeight=\"48dp\" />\n\n    <EditText\n        android:id=\"@+id/password\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"12dp\"\n        android:hint=\"New Password\"\n        android:inputType=\"textPassword\"\n        android:minHeight=\"48dp\" />\n\n    <Button\n        android:id=\"@+id/register\"\n        android:text=\"Register\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"/>\n\n</LinearLayout>\n\n\n\n\n\nstrings.xml\n\n<resources>\n    <string name=\"app_name\">Ticket Travel App</string>\n    <string-array name=\"destinations\">\n        <item>New York</item>\n        <item>London</item>\n        <item>Tokyo</item>\n        <item>Paris</item>\n        <item>Dubai</item>\n    </string-array>\n</resources>\n\n"
    },
    {
      "codeblockTitle": "imp1",
      "code": "\n// LAB 2 // -------------------------------------------------------------------------------------------------------------------------\n\n// MAIN ACTIVITY\n\n// Initialize the EditText fields by finding their corresponding views\nnum1 = findViewById(R.id.num1);\n// Initialize the Buttons and link them to the views\nButton btnAdd = findViewById(R.id.btnAdd);\n// Set onClickListeners for the buttons to update the operator when clicked\nbtnAdd.setOnClickListener(v -> selectedOperator = '+');\n\n// Toast\nToast.makeText(this, \"Please enter the first number\", Toast.LENGTH_SHORT).show();\n\n// Create an Intent to navigate to the ResultActivity and pass the result\nIntent intent = new Intent(MainActivity.this, ResultActivity.class);\nintent.putExtra(\"result\", resultText); // Put the result text into the Intent\nstartActivity(intent); // Start the ResultActivity\n\n// DIFF JAVA FILE\n\n// Retrieve the result text passed from MainActivity through the Intent\nString result = getIntent().getStringExtra(\"result\");\nresultTextView.setText(result);  // Set the result to the TextView\n\n// Set up the back button click listener to go back to MainActivity\nbackButton.setOnClickListener(v -> {\n    // Create an Intent to navigate back to MainActivity\n    Intent backIntent = new Intent(ResultActivity.this, MainActivity.class);\n    startActivity(backIntent);  // Start MainActivity\n    finish();  // Close ResultActivity so it’s removed from the back stack\n});\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// LAB 3 // -------------------------------------------------------------------------------------------------------------------------\n\n// MAIN ACTIVITY\n\n// Find the TabLayout and ViewPager2 from the layout\nTabLayout tabLayout = findViewById(R.id.tabLayout);\nViewPager2 viewPager = findViewById(R.id.viewPager);\n\n// Initialize the adapter for ViewPager2 which will handle fragments\nViewPagerAdapter adapter = new ViewPagerAdapter(this);\nviewPager.setAdapter(adapter);  // Set the adapter to the ViewPager2\n\n// Link the TabLayout with ViewPager2 and set the tab titles dynamically\nnew TabLayoutMediator(tabLayout, viewPager,\n(tab, position) -> {  // Set the tab titles based on the position\n    switch (position) {\n        case 0: tab.setText(\"Artists\"); break;  // Tab for Artists\n        // Add other cases\n    }\n}).attach();  // Attach the mediator to link ViewPager and TabLayout\n\n/* \n// XML FILE FOR TAB LAYOUT AND VIEW PAGER - activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/black\"\n    tools:context=\".MainActivity\">\n\n    <com.google.android.material.tabs.TabLayout\n        android:id=\"@+id/tabLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/purple_700\"\n        app:tabTextColor=\"@android:color/white\"\n        app:tabSelectedTextColor=\"@android:color/holo_green_light\"\n        app:tabIndicatorColor=\"@android:color/holo_green_light\"\n        app:tabGravity=\"fill\"\n        app:tabMode=\"fixed\" />\n\n    <androidx.viewpager2.widget.ViewPager2\n        android:id=\"@+id/viewPager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintTop_toBottomOf=\"@id/tabLayout\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n*/\n\n// DIFF FILE\n\n// Constructor that initializes the adapter with the FragmentActivity\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.swing.text.View;\nimport javax.swing.text.html.ListView;\n\nimport com.apple.laf.AquaButtonBorder.Toolbar;\n\npublic ViewPagerAdapter(@NonNull FragmentActivity fragmentActivity) {\n    super(fragmentActivity);\n}\n\n// This method is called to create a fragment for a specific position\n@NonNull\n@Override\npublic Fragment createFragment(int position) {\n    // Switch case to return the appropriate fragment based on the position\n    switch (position) {\n        case 0: // If the position is 0, return the ArtistsFragment\n            return new ArtistsFragment();\n        // Add other cases\n        default: // In case of an unexpected position, return the ArtistsFragment as default\n            return new ArtistsFragment();\n    }\n}\n\n// This method returns the total number of fragments (in this case, 3)\n@Override\npublic int getItemCount() {\n    return 3; // The number of tabs (Artists, Albums, Songs)\n}\n\n// DIFF JAVA FILE\n\npublic class ArtistsFragment extends Fragment {\n    // onCreateView is called when it's time to create the view for this fragment\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        // Inflate the layout for this fragment, fragment_list.xml, which contains the ListView\n        View view = inflater.inflate(R.layout.fragment_list, container, false);\n        // Find the ListView from the layout so that we can populate it with data\n        ListView listView = view.findViewById(R.id.listView);\n        // Create a list of artist names to display in the ListView\n        List<String> artists = Arrays.asList(\"Eminem\", \"Drake\", \"The Weeknd\", \"Taylor Swift\", \"Billie Eilish\");\n        // Create an ArrayAdapter to bind the list of artists to the ListView\n        // android.R.layout.simple_list_item_1 is a built-in layout that displays each artist name in a simple text format\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, artists);\n        // Set the adapter to the ListView so the artist names are displayed\n        listView.setAdapter(adapter);\n        // Return the view to be displayed in the fragment\n        return view;\n    }\n}\n\n/* // XML FILE FOR LIST VIEW\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"#CF9494D5\"\n    android:padding=\"16dp\">\n\n    <ListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:divider=\"@android:color/darker_gray\"\n        android:dividerHeight=\"1dp\"\n        android:textColor=\"#000000\"/>\n</LinearLayout>\n*/\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// Create an ArrayAdapter to bind the sports array to the ListView\n// Sample sports list to display in the ListView\nString[] sports = {\"Football\", \"Basketball\", \"Tennis\", \"Cricket\", \"Hockey\", \"Baseball\", \"Badminton\"};\n// Use the simple_list_item_1 layout resource for each item in the list\nArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, sports);\n// Set the adapter to the ListView so that it can display the sports items\nsportsList.setAdapter(adapter);\n// Set an item click listener for the ListView to handle clicks on individual items\nsportsList.setOnItemClickListener((parent, view, position, id) -> {\n    // Get the selected sport text from the clicked ListView item\n    String selectedSport = ((TextView) view).getText().toString();\n    // Display a Toast message showing the selected sport\n    Toast.makeText(MainActivity.this, \"Selected Sport: \" + selectedSport, Toast.LENGTH_SHORT).show();\n});\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// LAB 4 // --------------------------------------------------------------------------------------------------------------------------\n\nbutton.setOnClickListener(v -> {\n    // Show custom Toast for Button click\n    showCustomToast(\"Button Clicked!\", R.drawable.button_image);\n});\n\ntoggleButton.setOnCheckedChangeListener((buttonView, isChecked) -> {\n    // Show a custom Toast based on ToggleButton state\n    if (isChecked) {\n        showCustomToast(\"Toggle ON!\", R.drawable.toggle_on);\n    } else {\n        showCustomToast(\"Toggle OFF!\", R.drawable.toggle_off);\n    }\n});\n\nprivate void showCustomToast(String message, int imageResId) {\n    // Inflate the custom Toast layout\n    LayoutInflater inflater = getLayoutInflater();\n    View layout = inflater.inflate(R.layout.custom_toast, null);\n    // Set the image and message dynamically\n    ImageView imageView = layout.findViewById(R.id.toast_image);\n    imageView.setImageResource(imageResId);\n    TextView textView = layout.findViewById(R.id.toast_message);\n    textView.setText(message);\n    // Create and show the Toast\n    Toast toast = new Toast(getApplicationContext());\n    toast.setDuration(Toast.LENGTH_SHORT);\n    toast.setView(layout); // Set the custom layout as the view\n    toast.show();\n}\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// LAB 5 // --------------------------------------------------------------------------------------------------------------------------\n\nsubmitButton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        if (!vehicleNumber.isEmpty() && !rcNumber.isEmpty()) {\n            // Launch the confirmation activity to display entered details\n            Intent intent = new Intent(MainActivity.this, ConfirmationActivity.class);\n            startActivity(intent);\n        }\n    }\n});\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// Populate spinners from arrays.xml resources\nArrayAdapter<CharSequence> movieAdapter = ArrayAdapter.createFromResource(this,\nR.array.movies, android.R.layout.simple_spinner_item);\nmovieAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\nspinnerMovie.setAdapter(movieAdapter);\n\n// Get date from DatePicker (month is 0-indexed)\nint day = datePickerShow.getDayOfMonth();\nint month = datePickerShow.getMonth();\nint year = datePickerShow.getYear();\nString dateOfShow = day + \"/\" + (month + 1) + \"/\" + year;\n\n// Get time from TimePicker\nint hour = timePickerShow.getHour();\nint minute = timePickerShow.getMinute();\nString timeOfShow = String.format(\"%02d:%02d\", hour, minute);\n\nbtnReset.setOnClickListener(v -> {\n    spinnerMovie.setSelection(0);\n    spinnerTheatre.setSelection(0);\n\n    // Reset DatePicker to the current date\n    Calendar calendar = Calendar.getInstance();\n    datePickerShow.updateDate(calendar.get(Calendar.YEAR),\n            calendar.get(Calendar.MONTH),\n            calendar.get(Calendar.DAY_OF_MONTH));\n\n    // Reset TimePicker to current time\n    timePickerShow.setHour(calendar.get(Calendar.HOUR_OF_DAY));\n    timePickerShow.setMinute(calendar.get(Calendar.MINUTE));\n\n    // Reset ToggleButton to Standard (unchecked)\n    toggleTicketType.setChecked(false);\n\n    // Ensure Book Now is enabled\n    btnBookNow.setEnabled(true);\n});\n\n// ----------------------------------------------------------------------------------------------------------------------------------"
    },
    {
      "codeblockTitle": "imp2",
      "code": "\n// LAB 6 // --------------------------------------------------------------------------------------------------------------------------\n\nprotected void onCreate(Bundle savedInstanceState) {\n    // Set up toolbar if you have one (optional)\n    Toolbar toolbar = findViewById(R.id.toolbar);\n    setSupportActionBar(toolbar);\n    // Reference to the content container's TextView\n    contentText = findViewById(R.id.content_text);\n    // Set default content for homepage\n    contentText.setText(\"Welcome to XYZ Fitness Center\");\n}\n\npublic boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate our menu resource (contains both text and icon items)\n    getMenuInflater().inflate(R.menu.options_menu, menu);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    // Handle menu item clicks\n    int id = item.getItemId();\n    if (id == R.id.action_workout) {\n        // For \"Workout Plans\": display list of workout programs\n        contentText.setText(\"Workout Plans:\n- Weight Loss\n- Cardio\n- Strength Training\");\n        return true;\n    } else if (id == R.id.action_home) {\n        // Icon: Homepage\n        contentText.setText(\"Welcome to XYZ Fitness Center\");\n        return true;\n    }\n    return super.onOptionsItemSelected(item);\n}\n\n/*\n// XML FILE FOR activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!-- Optional: Toolbar to host the menu options -->\n    <com.google.android.material.appbar.MaterialToolbar\n        android:id=\"@+id/toolbar\"\n        style=\"@style/Widget.MaterialComponents.Toolbar.Primary\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:title=\"XYZ Fitness Center\"\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n\n    <!-- Content Container -->\n    <FrameLayout\n        android:id=\"@+id/content_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_marginTop=\"?attr/actionBarSize\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n        <TextView\n            android:id=\"@+id/content_text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Welcome to XYZ Fitness Center\"\n            android:textSize=\"18sp\"\n            android:layout_gravity=\"center\" />\n    </FrameLayout>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n\n// XML FILE FOR menu/options_menu.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Textual Option Items -->\n    <item\n        android:id=\"@+id/action_workout\"\n        android:title=\"Workout Plans\" />\n    <item\n        android:id=\"@+id/action_trainers\"\n        android:title=\"Trainers\" />\n    <item\n        android:id=\"@+id/action_membership\"\n        android:title=\"Membership\" />\n</menu>\n */\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// LAB 7 // --------------------------------------------------------------------------------------------------------------------------\n\n@Override\npublic View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\n    // View Recycling: reuse the old view if possible to avoid inflating a new one each time\n    if (convertView == null) {\n        convertView = LayoutInflater.from(context).inflate(R.layout.item_app_list, parent, false ); // inflate the layout for each item\n    }\n    // Data Binding: fetch the data object for this position in the list\n    AppInfo currentApp = appsList.get(position);\n    // View Lookup: find subviews inside convertView  \n    ImageView appIcon = convertView.findViewById(R.id.app_icon);\n    TextView appName   = convertView.findViewById(R.id.app_name);\n\n    // Populate the views with data from currentApp  \n    appIcon.setImageDrawable(currentApp.getIcon());    // set app icon drawable  \n    appName.setText(currentApp.getAppName());          // set app name text\n\n    // Event Handling: attach a long‑click listener to show options for this app  \n    convertView.setOnLongClickListener(v -> {\n        showAppOptionsDialog(currentApp);\n        return true;    // consume the event so default behavior doesn’t occur\n    });\n    // Return the prepared view for display in the ListView  \n    return convertView;\n}\n\nprivate void showAppOptionsDialog(AppInfo appInfo) {\n    // Define the menu options\n    String[] options = {\"App Type\", \"Open App\", \"Uninstall\", \"View Details\"};\n    // Build and show an AlertDialog with these items\n    new AlertDialog.Builder(context)\n        .setTitle(appInfo.getAppName())          // dialog title = app’s name\n        .setItems(options, (dialog, which) -> {  // handle clicks on each option\n            switch (which) {\n                case 0: // App Type\n                    showAppTypeDialog(appInfo);\n                    break;\n                case 1: // Open App\n                    openApp(appInfo.getPackageName());\n                    break;\n                case 2: // Uninstall\n                    uninstallApp(appInfo.getPackageName());\n                    break;\n                case 3: // View Details\n                    showAppDetails(appInfo);\n                    break;\n            }\n        })\n        .show();  // display the dialog :contentReference[oaicite:2]{index=2}\n}\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// Set click listener for menu icon\nmenuIcon.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // Create popup menu\n        PopupMenu popupMenu = new PopupMenu(MainActivity.this, v);\n        popupMenu.getMenuInflater().inflate(R.menu.image_menu, popupMenu.getMenu());\n\n        // Set menu item click listener\n        popupMenu.setOnMenuItemClickListener(item -> {\n            int itemId = item.getItemId();\n            if (itemId == R.id.image_1) {\n                // Display Image-1\n                displayImageView.setImageResource(R.drawable.image_1);\n                Toast.makeText(MainActivity.this, \"Image-1 Selected\", Toast.LENGTH_SHORT).show();\n                return true;\n            }\n            return false;\n        });\n        // Show the popup menu\n        popupMenu.show();\n    }\n});\n\n// ----------------------------------------------------------------------------------------------------------------------------------"
    },
    {
      "codeblockTitle": "imp3",
      "code": " // LAB 8 // --------------------------------------------------------------------------------------------------------------------------\n\n// MAIN ACTIVITY\n\nprivate void showAddTaskDialog(Task taskToEdit, int position) {\n    // Create dialog for adding/editing a task\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    LayoutInflater inflater = getLayoutInflater();\n    View dialogView = inflater.inflate(R.layout.dialog_add_task, null);\n    builder.setView(dialogView);\n\n    // Set default values if editing\n    if (taskToEdit != null) {\n        editTextTaskName.setText(taskToEdit.getName());\n        // Set date picker to task due date\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(taskToEdit.getDueDate());\n        datePicker.updateDate(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));\n        // Set priority\n        String priority = taskToEdit.getPriority();\n        int priorityPosition = 0;\n        if (priority.equals(\"Medium\")) priorityPosition = 1;\n        else if (priority.equals(\"Low\")) priorityPosition = 2;\n        spinnerPriority.setSelection(priorityPosition);\n    }\n\n    // Create and show the dialog\n    AlertDialog dialog = builder.create();\n    dialog.show();\n\n    // Set click listener for save button\n    btnSave.setOnClickListener(v -> {\n        if (taskToEdit == null) {\n            // Add new task\n            Task newTask = new Task(taskName, dueDate, priority);\n            taskList.add(newTask);\n            Toast.makeText(MainActivity.this, \"Task added\", Toast.LENGTH_SHORT).show();\n        } else {\n            // Update existing task\n            taskToEdit.setName(taskName);\n            Toast.makeText(MainActivity.this, \"Task updated\", Toast.LENGTH_SHORT).show();\n        }\n        // Notify adapter and dismiss dialog\n        taskAdapter.notifyDataSetChanged();\n        dialog.dismiss();\n    });\n    // Set click listener for cancel button\n    btnCancel.setOnClickListener(v -> dialog.dismiss());\n}\n\n// DIFF JAVA FILE\n\npublic Task(String name, Date dueDate, String priority) {\n    this.name = name;\n    this.dueDate = dueDate;\n    this.priority = priority;\n}\n\n// DIFF JAVA FILE\n\npublic View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {\n    // Get the data item for this position\n    Task task = getItem(position);\n\n    // Check if an existing view is being reused, otherwise inflate the view\n    if (convertView == null) {\n        convertView = LayoutInflater.from(getContext()).inflate(R.layout.list_item_task, parent, false);\n    }\n\n    // Lookup view for data population\n    TextView tvTaskName = convertView.findViewById(R.id.tvTaskName);\n\n    // Populate the data into the template view using the data object\n    tvTaskName.setText(task.getName());\n    tvDueDate.setText(\"Due: \" + task.getFormattedDueDate());\n    tvPriority.setText(task.getPriority());\n\n    // Set color based on priority\n    switch (task.getPriority()) {\n        case \"High\":\n            tvPriority.setTextColor(Color.RED);\n            break; // etc\n    }\n\n    // Return the completed view to render on screen\n    return convertView;\n}\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// MAIN ACTIVITY\n\n// Initialize database helper\ndatabaseHelper = new GroceryDatabaseHelper(this);\n\nprivate void populateSpinner() {\n    // Add some initial items if database is empty\n    if (databaseHelper.getAllGroceryItemNames().isEmpty()) {\n        databaseHelper.addGroceryItem(\"Milk\", 3.50);\n        databaseHelper.addGroceryItem(\"Bread\", 2.25);\n    }\n    // Populate available items\n    availableItems = databaseHelper.getAllGroceryItemNames();\n}\n\nprivate void addSelectedItem() {\n    // Get selected item from spinner\n    String selectedItem = (String) itemSpinner.getSelectedItem();\n    // Get price from EditText\n    String priceStr = priceEditText.getText().toString();\n    double price = Double.parseDouble(priceStr);\n\n    // Add to selected items list\n    String itemEntry = String.format(Locale.getDefault(), \"%s - $%.2f\", selectedItem, price);\n    selectedItems.add(itemEntry);\n    listAdapter.notifyDataSetChanged();\n    // Update total cost\n    totalCost += price;\n    updateTotalCost();\n    // Clear price input\n    priceEditText.setText(\"\");\n}\n\nprivate void updateTotalCost() {\n    totalCostTextView.setText(String.format(Locale.getDefault(), \"Total Cost: $%.2f\", totalCost));\n}\n\n// DIFF JAVA FILE\n\npublic class GroceryDatabaseHelper extends SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"grocery_database\";\n    private static final int DATABASE_VERSION = 1;\n\n    // Table and column names\n    private static final String TABLE_GROCERY_ITEMS = \"grocery_items\";\n    private static final String COLUMN_ID = \"id\";\n    private static final String COLUMN_NAME = \"name\";\n    private static final String COLUMN_PRICE = \"price\";\n\n    // Create table SQL\n    private static final String CREATE_TABLE_GROCERY_ITEMS =\n            \"CREATE TABLE \" + TABLE_GROCERY_ITEMS + \"(\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n                    + COLUMN_NAME + \" TEXT,\"\n                    + COLUMN_PRICE + \" REAL)\";\n\n    // Method to add a grocery item\n    public long addGroceryItem(String name, double price) {\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues values = new ContentValues();\n        values.put(COLUMN_NAME, name);\n        values.put(COLUMN_PRICE, price);\n        return db.insert(TABLE_GROCERY_ITEMS, null, values);\n    }\n\n    // Method to get all grocery item names\n    public List<String> getAllGroceryItemNames() {\n        List<String> itemNames = new ArrayList<>();\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = db.query(TABLE_GROCERY_ITEMS,\n                new String[]{COLUMN_NAME},\n                null, null, null, null, null);\n        if (cursor.moveToFirst()) {\n            do {\n                itemNames.add(cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME)));\n            } while (cursor.moveToNext());\n        }\n        cursor.close();\n        return itemNames;\n    }\n\n    // Method to get price of a specific item\n    public double getItemPrice(String itemName) {\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = db.query(TABLE_GROCERY_ITEMS,\n                new String[]{COLUMN_PRICE},\n                COLUMN_NAME + \" = ?\",\n                new String[]{itemName},\n                null, null, null);\n        double price = 0;\n        if (cursor.moveToFirst()) {\n            price = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_PRICE));\n        }\n        cursor.close();\n        return price;\n    }\n}\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// UNDERSTAND DATABASE QUERYING EXAMPLE\n\npublic class BooksDbHelper extends SQLiteOpenHelper {\n    private static final String DB_NAME    = \"library.db\";\n    private static final int    DB_VERSION = 1;\n\n    // Table and column names\n    private static final String TABLE_BOOKS      = \"books\";\n    private static final String COL_ID           = \"_id\";\n    private static final String COL_TITLE        = \"title\";\n    private static final String COL_AUTHOR       = \"author\";\n    private static final String COL_YEAR         = \"publish_year\";\n    private static final String COL_RATING       = \"rating\";\n\n    public BooksDbHelper(Context context) {\n        super(context, DB_NAME, null, DB_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        // 1. Create the \"books\" table\n        String sqlCreate = \"\"\n            + \"CREATE TABLE \" + TABLE_BOOKS + \" (\"\n            +     COL_ID     + \" INTEGER PRIMARY KEY, \"\n            +     COL_TITLE  + \" TEXT NOT NULL, \"\n            +     COL_AUTHOR + \" TEXT NOT NULL, \"\n            +     COL_YEAR   + \" INTEGER, \"\n            +     COL_RATING + \" REAL\"\n            + \");\";\n        db.execSQL(sqlCreate); // :contentReference[oaicite:0]{index=0}\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldV, int newV) {\n        // For simplicity, drop & recreate\n        db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_BOOKS);\n        onCreate(db);\n    }\n\n    // 2. selection: fetch books by a specific author\n    public List<Book> loadBooksByAuthor(String authorName) {\n        List<Book> books = new ArrayList<>();\n        SQLiteDatabase db = getReadableDatabase();\n\n        String[] projection    = { COL_TITLE, COL_YEAR, COL_RATING };\n        String   selection     = COL_AUTHOR + \" = ?\";\n        String[] selectionArgs = { authorName };\n\n        Cursor c = db.query(\n            TABLE_BOOKS,       // table\n            projection,        // columns (null → all columns)\n            selection,         // WHERE clause (null → no filter)\n            selectionArgs,     // args for \"?\"s (null → none)\n            null,              // groupBy  (e.g. COL_AUTHOR)\n            null,              // having   (e.g. \"COUNT(*) > 1\")\n            null               // orderBy  (e.g. COL_YEAR + \" DESC\")\n        ); // :contentReference[oaicite:1]{index=1}\n\n        while (c.moveToNext()) {\n            Book b = new Book();\n            b.title  = c.getString(c.getColumnIndexOrThrow(COL_TITLE));\n            b.year   = c.getInt   (c.getColumnIndexOrThrow(COL_YEAR));\n            b.rating = c.getFloat (c.getColumnIndexOrThrow(COL_RATING));\n            books.add(b);\n        }\n        c.close();\n        db.close();\n        return books;\n    }\n\n    // 3. groupBy: count books per author\n    public Map<String,Integer> countBooksPerAuthor() {\n        Map<String,Integer> map = new HashMap<>();\n        SQLiteDatabase db = getReadableDatabase();\n\n        String[] projection = {\n            COL_AUTHOR,\n            \"COUNT(*) AS book_count\"\n        };\n\n        Cursor c = db.query(\n            TABLE_BOOKS,\n            projection,\n            null, null,           // no row-level filter\n            COL_AUTHOR,           // GROUP BY author\n            null,                 // no HAVING\n            null                  // no ORDER BY\n        ); // :contentReference[oaicite:2]{index=2}\n\n        while (c.moveToNext()) {\n            String author = c.getString(c.getColumnIndexOrThrow(COL_AUTHOR));\n            int    cnt    = c.getInt   (c.getColumnIndexOrThrow(\"book_count\"));\n            map.put(author, cnt);\n        }\n        c.close();\n        db.close();\n        return map;\n    }\n\n    // 4. having: authors with >3 books\n    public List<String> authorsWithManyBooks() {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = getReadableDatabase();\n\n        String[] projection = {\n            COL_AUTHOR,\n            \"COUNT(*) AS book_count\"\n        };\n        String groupBy = COL_AUTHOR;\n        String having  = \"book_count > 3\";\n\n        Cursor c = db.query(\n            TABLE_BOOKS,\n            projection,\n            null, null,      // no row-level filter\n            groupBy,\n            having,          // HAVING book_count > 3\n            null             // default ordering\n        ); // :contentReference[oaicite:3]{index=3}\n\n        while (c.moveToNext()) {\n            list.add(c.getString(c.getColumnIndexOrThrow(COL_AUTHOR)));\n        }\n        c.close();\n        db.close();\n        return list;\n    }\n\n    // 5. orderBy + limit: top‑10 highest rated, newest first\n    public List<Book> loadTopRatedRecentBooks() {\n        List<Book> top = new ArrayList<>();\n        SQLiteDatabase db = getReadableDatabase();\n\n        String[] projection = { COL_ID, COL_TITLE, COL_RATING, COL_YEAR };\n        String   orderBy    = COL_RATING + \" DESC, \" + COL_YEAR + \" DESC\";\n        String   limit      = \"10\";\n\n        Cursor c = db.query(\n            TABLE_BOOKS,\n            projection,\n            null, null,      // no filter\n            null, null,      // no grouping\n            orderBy,\n            limit            // LIMIT 10\n        ); // :contentReference[oaicite:4]{index=4}\n\n        while (c.moveToNext()) {\n            Book b = new Book();\n            b.id     = c.getLong  (c.getColumnIndexOrThrow(COL_ID));\n            b.title  = c.getString(c.getColumnIndexOrThrow(COL_TITLE));\n            b.rating = c.getFloat (c.getColumnIndexOrThrow(COL_RATING));\n            b.year   = c.getInt   (c.getColumnIndexOrThrow(COL_YEAR));\n            top.add(b);\n        }\n        c.close();\n        db.close();\n        return top;\n    }\n\n    // 6. rawQuery equivalent: authors with >3 books\n    public List<String> authorsWithManyBooksRaw() {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = getReadableDatabase();\n\n        String sql = \"\"\n            + \"SELECT \" + COL_AUTHOR + \" \"\n            + \"FROM \"   + TABLE_BOOKS + \" \"\n            + \"GROUP BY \" + COL_AUTHOR + \" \"\n            + \"HAVING COUNT(*) > ? \"\n            + \"ORDER BY \" + COL_AUTHOR + \" ASC\";\n\n        String[] args = { \"3\" };\n\n        Cursor c = db.rawQuery(sql, args); // :contentReference[oaicite:5]{index=5}\n\n        while (c.moveToNext()) {\n            list.add(c.getString(c.getColumnIndexOrThrow(COL_AUTHOR)));\n        }\n        c.close();\n        db.close();\n        return list;\n    }\n\n    // 7. Add (insert) a new book into the database. Returns the row ID of the newly inserted row, or -1 if an error occurred.\n    public long addBook(String title, String author, int year, float rating) {\n        SQLiteDatabase db = getWritableDatabase();\n        ContentValues values = new ContentValues();\n        values.put(COL_TITLE,  title);\n        values.put(COL_AUTHOR, author);\n        values.put(COL_YEAR,   year);\n        values.put(COL_RATING, rating);\n\n        // nullColumnHack: if 'values' is empty, you must specify\n        // a column name here to explicitly insert NULL into.\n        long newRowId = db.insert(\n            TABLE_BOOKS,    // table name\n            null,           // nullColumnHack (we have values, so null)\n            values          // values to insert\n        );\n        db.close();\n        return newRowId;\n    }\n\n    //8. Delete a book by its ID. Returns the number of rows deleted (should be 0 or 1).\n    public int deleteBook(long bookId) {\n        SQLiteDatabase db = getWritableDatabase();\n        // WHERE clause (without 'WHERE'):\n        String whereClause = COL_ID + \" = ?\";\n        String[] whereArgs = { String.valueOf(bookId) };\n        int deletedRows = db.delete(\n            TABLE_BOOKS,   // table name\n            whereClause,   // WHERE clause\n            whereArgs      // arguments for \"?\"\n        );\n        db.close();\n        return deletedRows;\n    }\n\n    // Simple POJO for book data\n    public static class Book {\n        public long   id;\n        public String title;\n        public int    year;\n        public float  rating;\n    }\n}\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n//MAIN ACTIVITY\n\n// Setup ViewPager with Fragments\nviewPager.setAdapter(new MovieReviewPagerAdapter(this));\n\n// Connect TabLayout with ViewPager\nnew TabLayoutMediator(tabLayout, viewPager, \n        (tab, position) -> {\n            switch (position) {\n                case 0:\n                    tab.setText(\"Submit Review\");\n                    break;\n                case 1:\n                    tab.setText(\"View Reviews\");\n                    break;\n            }\n        }\n).attach();\n}\n\n// ViewPager Adapter\nprivate class MovieReviewPagerAdapter extends FragmentStateAdapter {\n    public MovieReviewPagerAdapter(FragmentActivity fragmentActivity) {\n        super(fragmentActivity);\n    }\n\n@Override\n    public Fragment createFragment(int position) {\n        switch (position) {\n            case 0:\n                return new ReviewSubmissionFragment();\n            case 1:\n                return new ReviewViewFragment();\n            default:\n                return new ReviewSubmissionFragment();\n        }\n    }\n\n@Override\n    public int getItemCount() {\n            return 2;\n    }\n}\n\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fragment_review_submission, container, false);\n    // Initialize database helper\n    databaseHelper = new MovieDatabaseHelper(requireContext());\n    // Setup submit button\n    submitButton.setOnClickListener(v -> submitReview());\n    return view;\n}\n\n// DIFF JAVA FILE\n\nprivate void submitReview() {\n    long result = databaseHelper.addMovieReview(movieName, year, points, reviewText);\n    if (result != -1) {\n        Toast.makeText(requireContext(), \"Review submitted successfully!\", Toast.LENGTH_SHORT).show();\n        // Clear inputs\n        movieNameEditText.setText(\"\");\n        yearEditText.setText(\"\");\n        pointsRatingBar.setRating(0);\n        reviewEditText.setText(\"\");\n    } else {\n        Toast.makeText(requireContext(), \"Failed to submit review\", Toast.LENGTH_SHORT).show();\n    }\n}\n\n// DIFF JAVA FILE\n\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fragment_review_view, container, false);\n    // Initialize database helper\n    databaseHelper = new MovieDatabaseHelper(requireContext());\n    // Populate movie list\n    populateMovieList();\n    // Setup list item click listener\n    movieListView.setOnItemClickListener(this::onMovieSelected);\n    return view;\n}\n\nprivate void onMovieSelected(AdapterView<?> parent, View view, int position, long id) {\n    String selectedMovie = (String) parent.getItemAtPosition(position);\n    MovieDatabaseHelper.MovieReview review = databaseHelper.getMovieReviewDetails(selectedMovie);\n\n    if (review != null) {\n        movieNameTextView.setText(String.format(\"Movie: %s\", review.movieName));\n        yearTextView.setText(String.format(\"Year: %d\", review.year));\n        pointsTextView.setText(String.format(Locale.getDefault(), \"Points: %.1f/5\", review.points));\n        reviewTextView.setText(String.format(\"Review: %s\", review.reviewText));\n    }\n}\n\n// DIFF JAVA FILE\n\npublic class MovieDatabaseHelper extends SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"movie_reviews_db\";\n    private static final int DATABASE_VERSION = 1;\n\n    // Table and column names\n    private static final String TABLE_REVIEWS = \"movie_reviews\";\n    private static final String COLUMN_ID = \"id\";\n    private static final String COLUMN_MOVIE_NAME = \"movie_name\";\n    private static final String COLUMN_YEAR = \"year\";\n    private static final String COLUMN_POINTS = \"points\";\n    private static final String COLUMN_REVIEW_TEXT = \"review_text\";\n\n    // Create table SQL\n    private static final String CREATE_TABLE_REVIEWS =\n            \"CREATE TABLE \" + TABLE_REVIEWS + \"(\"\n                    + COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\"\n                    + COLUMN_MOVIE_NAME + \" TEXT,\"\n                    + COLUMN_YEAR + \" INTEGER,\"\n                    + COLUMN_POINTS + \" REAL,\"\n                    + COLUMN_REVIEW_TEXT + \" TEXT)\";\n                    \n    // Method to add a movie review\n    public long addMovieReview(String movieName, int year, float points, String reviewText) {\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues values = new ContentValues();\n        values.put(COLUMN_MOVIE_NAME, movieName);\n        values.put(COLUMN_YEAR, year);\n        values.put(COLUMN_POINTS, points);\n        values.put(COLUMN_REVIEW_TEXT, reviewText);\n        return db.insert(TABLE_REVIEWS, null, values);\n    }\n\n    // Method to get all movie names\n    public List<String> getAllMovieNames() {\n        List<String> movieNames = new ArrayList<>();\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = db.query(\n                TABLE_REVIEWS,\n                new String[]{COLUMN_MOVIE_NAME},\n                null, null,\n                COLUMN_MOVIE_NAME, null, null\n        );\n        if (cursor.moveToFirst()) {\n            do {\n                movieNames.add(cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MOVIE_NAME)));\n            } while (cursor.moveToNext());\n        }\n        cursor.close();\n        return movieNames;\n    }\n\n    // Method to get movie review details\n    public MovieReview getMovieReviewDetails(String movieName) {\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = db.query(\n                TABLE_REVIEWS,\n                null,\n                COLUMN_MOVIE_NAME + \" = ?\",\n                new String[]{movieName},\n                null, null, null\n        );\n        MovieReview review = null;\n        if (cursor.moveToFirst()) {\n            review = new MovieReview(\n                    cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_MOVIE_NAME)),\n                    cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_YEAR)),\n                    cursor.getFloat(cursor.getColumnIndexOrThrow(COLUMN_POINTS)),\n                    cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_TEXT))\n            );\n        }\n        cursor.close();\n        return review;\n    }\n\n    // Movie Review Data Class\n    public static class MovieReview {\n        public String movieName;\n        public int year;\n        public float points;\n        public String reviewText;\n\n        public MovieReview(String movieName, int year, float points, String reviewText) {\n            this.movieName = movieName;\n            this.year = year;\n            this.points = points;\n            this.reviewText = reviewText;\n        }\n    }\n}\n\n// ----------------------------------------------------------------------------------------------------------------------------------\n\n// SHARED PREFERENCES EXAMPLE\n\nprotected void onCreate(Bundle savedInstanceState) {\n    // Initialize UI components\n    initializeViews();\n    // Load saved preferences\n    loadSavedPreferences();\n}\n\nprivate void initializeViews() {\n    buttonSave.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            savePreferences();\n        }\n    });\n}\n\nprivate void savePreferences() {\n    // Get SharedPreferences in edit mode\n    SharedPreferences preferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\n    SharedPreferences.Editor editor = preferences.edit();\n    // Save the values from EditText fields\n    editor.putString(NAME_KEY, editTextName.getText().toString());\n    editor.putString(EMAIL_KEY, editTextEmail.getText().toString());\n    // Commit the changes\n    editor.apply(); // or editor.commit() for synchronous saving\n    Toast.makeText(this, \"Preferences Saved\", Toast.LENGTH_SHORT).show();\n}\n\nprivate void loadSavedPreferences() {\n    // Retrieve SharedPreferences\n    SharedPreferences preferences = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);\n    // Restore values from SharedPreferences\n    String savedName = preferences.getString(NAME_KEY, \"\");\n    String savedEmail = preferences.getString(EMAIL_KEY, \"\");\n    int savedAge = preferences.getInt(AGE_KEY, -1);\n    // Set the restored values to EditText fields\n    editTextName.setText(savedName);\n    editTextEmail.setText(savedEmail);\n}\n"
    },
    {
      "codeblockTitle": "Button usage",
      "code": "//declared during start\nprivate TextView myTextView;\nprivate Button myButton;\n\n \n//now in function\nmyTextView = findViewById(R.id.myTextView);\nmyButton = findViewById(R.id.button);\n\n        myButton.setOnClickListener(v -> {\n            // add code here \n            myTextView.setText(\"Button Pressed\");         \n        //s=(String)myTextView.getText()\n});\n"
    },
    {
      "codeblockTitle": "Delay actions",
      "code": "//import android.os.Handler;\n//import android.os.Looper; \n\nnew Handler(Looper.getMainLooper()).postDelayed(() -> {\n                myTextView.setText(s);  // put any UI element action here\n            }, 1000);\n            //myTextView.postDelayed(() -> myTextView.setText(s), 1000);"
    },
    {
      "codeblockTitle": "creating and Passing Data via Intent",
      "code": "Ex 1 in MainActivity.java\n// Set a click listener for the \"next\" button\n        next.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // Get the text entered by the user\n                String n = name.getText().toString();\n\n                // Create an intent to start MainActivity2 and pass the entered name\n                Intent intent = new Intent(MainActivity.this, MainActivity2.class);\n                intent.putExtra(\"nameUser\", n); // Attach the name as extra data\n                // Start MainActivity2\n                startActivity(intent);\n            }\n        });\n\nExample2: coming back from Mainactivty2.java\nback.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // Create an intent to go back to MainActivity\n                Intent intent = new Intent(MainActivity2.this, MainActivity.class);\n                startActivity(intent);\n            }\n        });"
    },
    {
      "codeblockTitle": "ArrayListAdapter and selecting items from ListView",
      "code": "public class MainActivity extends AppCompatActivity {\n\n    // List of sports\n    String[] sports = {\n            \"Cricket\", \"Football\", \"Basketball\", \"Tennis\", \"Hockey\",\n            \"Badminton\", \"Volleyball\", \"Table Tennis\", \"Golf\", \"Baseball\"\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get reference to ListView\n        ListView listView = findViewById(R.id.listView);\n        TextView textView = findViewById(R.id.selected);\n\n        // Create an ArrayAdapter to populate the ListView\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(\n                this, android.R.layout.simple_list_item_1, sports\n        );\n        listView.setAdapter(adapter);\n\n        // Handle click events\n        listView.setOnItemClickListener((AdapterView<?> parent, View view, int position, long id) -> {\n            String selectedSport = sports[position];\n            textView.setText(String.format(\"Selected: %s\", selectedSport));\n        });\n    }\n}"
    },
    {
      "codeblockTitle": "Toast Message",
      "code": "Button button = findViewById(R.id.button);\nbutton.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View v) {\nToast.makeText(MainActivity.this, \"Button Clicked!\", Toast.LENGTH_SHORT).show();\n}\n});\nwhere\ncontext: The current context, usually an activity or application context.\n\"Message to show\": The message text you want to display.\nToast.LENGTH_SHORT: Duration for the toast to be visible (short duration).\nToast.LENGTH_LONG: Alternative to display the toast for a longer duration.\n.show(): This is used to display the Toast on the screen"
    },
    {
      "codeblockTitle": "Seek Bar",
      "code": "A SeekBar is a slider control that allows users to select a value from a range.\nXML code snippet:\n<SeekBar\nandroid:id=\"@+id/seekBar\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:max=\"100\" />"
    },
    {
      "codeblockTitle": "Check Box,zoom button,toggle, radio radio group,switch",
      "code": "CheckBox\nA CheckBox is a toggleable UI element that allows users to select multiple options from a set.\nXML code snippet:\n<CheckBox\nandroid:id=\"@+id/checkBox\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Option 1\" />\n\n\nZoomButton\nA ZoomButton is a special type of button for zooming in and out.\nXML code snippet:\n<ZoomButton\nandroid:id=\"@+id/zoomButton\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Zoom\" />\n\nToggleButton\nA ToggleButton is a switch-like control that toggles between two states: ON and OFF.\nXML code snippet:\n<ToggleButton\nandroid:id=\"@+id/toggleButton\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:textOn=\"ON\"\nandroid:textOff=\"OFF\" />\n\n\nRadioButton and RadioGroup\na.\nRadioButton: Allows users to select a single option from a group.\nb.\nRadioGroup: Groups multiple RadioButton controls for exclusive selection.\nRadioGroup with RadioButton\n<RadioGroup\nandroid:id=\"@+id/radioGroup\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\">\n<RadioButton\nandroid:id=\"@+id/radioButton1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Option 1\" />\n<RadioButton\nandroid:id=\"@+id/radioButton2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Option 2\" />\n</RadioGroup>\n\n\nSwitch:\nA Switch is similar to a ToggleButton but has a more modern UI for ON/OFF states.\n<Switch\nandroid:id=\"@+id/switch\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Switch\" />"
    },
    {
      "codeblockTitle": "menu/MainActivity.java",
      "code": "package com.example.myapplication;\n\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.WindowInsetsCompat;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private TextView contentText;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Enable edge-to-edge display\n        setContentView(R.layout.activity_main);\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        // Set up toolbar if you have one (optional)\n        Toolbar toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        // Reference to the content container's TextView\n        contentText = findViewById(R.id.content_text);\n        // Set default content for homepage\n        contentText.setText(\"Welcome to XYZ Fitness Center\");\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate our menu resource (contains both text and icon items)\n        getMenuInflater().inflate(R.menu.options_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle menu item clicks\n        int id = item.getItemId();\n\n        if (id == R.id.action_workout) {\n            // For \"Workout Plans\": display list of workout programs\n            contentText.setText(\"Workout Plans:\n- Weight Loss\n- Cardio\n- Strength Training\");\n            return true;\n        } else if (id == R.id.action_trainers) {\n            // For \"Trainers\": display trainer names, specializations, and sample photos\n            contentText.setText(\"Trainers:\nJohn Doe - Strength & Conditioning\nJane Smith - Cardio & Endurance\");\n            // In a complete app, you would likely replace this text with a RecyclerView or Fragment\n            return true;\n        } else if (id == R.id.action_membership) {\n            // For \"Membership\": display packages and pricing details\n            contentText.setText(\"Membership Packages:\n- Basic: $30/month\n- Premium: $50/month\n- VIP: $80/month\");\n            return true;\n        } else if (id == R.id.action_home) {\n            // Icon: Homepage\n            contentText.setText(\"Welcome to XYZ Fitness Center\");\n            return true;\n        } else if (id == R.id.action_contact) {\n            // Icon: Contact US\n            contentText.setText(\"Contact Us at:\nPhone: (123) 456-7890\nEmail: contact@xyzfitness.com\");\n            return true;\n        } else if (id == R.id.action_about) {\n            // Icon: About Us\n            contentText.setText(\"About Us:\nXYZ Fitness Center is dedicated to helping you achieve your fitness goals.\");\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}"
    },
    {
      "codeblockTitle": "Notes",
      "code": "// LAB 2\n\n// Initialize the EditText fields by finding their corresponding views\nnum1 = findViewById(R.id.num1);\n// Initialize the Buttons and link them to the views\nButton btnAdd = findViewById(R.id.btnAdd);\n// Set onClickListeners for the buttons to update the operator when clicked\nbtnAdd.setOnClickListener(v -> selectedOperator = '+');\n\n// Toast\nToast.makeText(this, \"Please enter the first number\", Toast.LENGTH_SHORT).show();\n\n// Create an Intent to navigate to the ResultActivity and pass the result\nIntent intent = new Intent(MainActivity.this, ResultActivity.class);\nintent.putExtra(\"result\", resultText); // Put the result text into the Intent\nstartActivity(intent); // Start the ResultActivity\n\n// DIFF JAVA FILE\n\n// Retrieve the result text passed from MainActivity through the Intent\nString result = getIntent().getStringExtra(\"result\");\nresultTextView.setText(result);  // Set the result to the TextView\n\n// Create an Intent to navigate back to MainActivity\nIntent backIntent = new Intent(ResultActivity.this, MainActivity.class);\nstartActivity(backIntent);  // Start MainActivity\nfinish();  // Close ResultActivity so it’s removed from the back stack\n\n// LAB 3\n\n// Find the TabLayout and ViewPager2 from the layout\nTabLayout tabLayout = findViewById(R.id.tabLayout);\nViewPager2 viewPager = findViewById(R.id.viewPager);\n\n// Initialize the adapter for ViewPager2 which will handle fragments\nViewPagerAdapter adapter = new ViewPagerAdapter(this);\nviewPager.setAdapter(adapter);  // Set the adapter to the ViewPager2\n\n// Link the TabLayout with ViewPager2 and set the tab titles dynamically\nnew TabLayoutMediator(tabLayout, viewPager,\n(tab, position) -> {  // Set the tab titles based on the position\n    switch (position) {\n        case 0: tab.setText(\"Artists\"); break;  // Tab for Artists\n    }\n}).attach();  // Attach the mediator to link ViewPager and TabLayout\n\n// DIFF FILE\npublic Fragment createFragment(int position) {\n    // Switch case to return the appropriate fragment based on the position\n    switch (position) {\n        case 0: // If the position is 0, return the ArtistsFragment\n            return new ArtistsFragment();\n    }\n}\n\n// DIFF JAVA FILE\n\n//public class ArtistsFragment extends Fragment {\n    // onCreateView is called when it's time to create the view for this fragment\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        // Inflate the layout for this fragment, fragment_list.xml, which contains the ListView\n        View view = inflater.inflate(R.layout.fragment_list, container, false);\n        // Find the ListView from the layout so that we can populate it with data\n        ListView listView = view.findViewById(R.id.listView);\n        // Create a list of artist names to display in the ListView\n        List<String> artists = Arrays.asList(\"Eminem\", \"Drake\", \"The Weeknd\", \"Taylor Swift\", \"Billie Eilish\");\n        // Create an ArrayAdapter to bind the list of artists to the ListView\n        // android.R.layout.simple_list_item_1 is a built-in layout that displays each artist name in a simple text format\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, artists);\n        // Set the adapter to the ListView so the artist names are displayed\n        listView.setAdapter(adapter);\n        // Return the view to be displayed in the fragment\n        return view;\n    }\n}\n\n// Create an ArrayAdapter to bind the sports array to the ListView\n// Use the simple_list_item_1 layout resource for each item in the list\nArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, sports);\n// Set the adapter to the ListView so that it can display the sports items\nsportsList.setAdapter(adapter);\n// Set an item click listener for the ListView to handle clicks on individual items\nsportsList.setOnItemClickListener((parent, view, position, id) -> {\n    // Get the selected sport text from the clicked ListView item\n    String selectedSport = ((TextView) view).getText().toString();\n    // Display a Toast message showing the selected sport\n    Toast.makeText(MainActivity.this, \"Selected Sport: \" + selectedSport, Toast.LENGTH_SHORT).show();\n});\n\n// LAB 4\n\nbutton.setOnClickListener(v -> {\n    // Show custom Toast for Button click\n    showCustomToast(\"Button Clicked!\", R.drawable.button_image);\n});\n\ntoggleButton.setOnCheckedChangeListener((buttonView, isChecked) -> {\n    // Show a custom Toast based on ToggleButton state\n    if (isChecked) {\n        showCustomToast(\"Toggle ON!\", R.drawable.toggle_on);\n    } else {\n        showCustomToast(\"Toggle OFF!\", R.drawable.toggle_off);\n    }\n});\n\nprivate void showCustomToast(String message, int imageResId) {\n    // Inflate the custom Toast layout\n    LayoutInflater inflater = getLayoutInflater();\n    View layout = inflater.inflate(R.layout.custom_toast, null);\n    // Set the image and message dynamically\n    ImageView imageView = layout.findViewById(R.id.toast_image);\n    imageView.setImageResource(imageResId);\n    TextView textView = layout.findViewById(R.id.toast_message);\n    textView.setText(message);\n    // Create and show the Toast\n    Toast toast = new Toast(getApplicationContext());\n    toast.setDuration(Toast.LENGTH_SHORT);\n    toast.setView(layout); // Set the custom layout as the view\n    toast.show();\n}\n\n// LAB 5\n\n// Enable edge-to-edge display\nViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n    Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n    v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n    return insets;\n});\n\n// Populate spinners from arrays.xml resources\nArrayAdapter<CharSequence> movieAdapter = ArrayAdapter.createFromResource(this,\nR.array.movies, android.R.layout.simple_spinner_item);\nmovieAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\nspinnerMovie.setAdapter(movieAdapter);\n\n// Get date from DatePicker (month is 0-indexed)\nint day = datePickerShow.getDayOfMonth();\nint month = datePickerShow.getMonth();\nint year = datePickerShow.getYear();\nString dateOfShow = day + \"/\" + (month + 1) + \"/\" + year;\n\n// Get time from TimePicker\nint hour = timePickerShow.getHour();\nint minute = timePickerShow.getMinute();\nString timeOfShow = String.format(\"%02d:%02d\", hour, minute);\n\n// Reset spinners to their first item\nspinnerSource.setSelection(0);\nspinnerDestination.setSelection(0);\n\n// Reset DatePicker to current date\nCalendar calendar = Calendar.getInstance();\ndatePickerTravel.updateDate(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));\n\n// Reset ToggleButton to default state (unchecked = One Way)\ntoggleTicketType.setChecked(false);\n\n// LAB 6\n\npublic boolean onCreateOptionsMenu(Menu menu) {\n    // Inflate our menu resource (contains both text and icon items)\n    getMenuInflater().inflate(R.menu.options_menu, menu);\n    return true;\n}\n\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    // Handle menu item clicks\n    int id = item.getItemId();\n    if (id == R.id.action_workout) {\n        // For \"Workout Plans\": display list of workout programs\n        contentText.setText(\"Workout Plans:\n- Weight Loss\n- Cardio\n- Strength Training\");\n        return true;\n    } else if (id == R.id.action_home) {\n        // Icon: Homepage\n        contentText.setText(\"Welcome to XYZ Fitness Center\");\n        return true;\n    }\n    return super.onOptionsItemSelected(item);\n}"
    }
  ]
}